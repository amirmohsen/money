{"version":3,"sources":["webpack:///./src/pages/guides.js","webpack:///./src/components/Grid/index.js","webpack:///./src/components/ConfigurableCodeBlock/CodeBlockOptions/index.js","webpack:///./src/components/ConfigurableCodeBlock/Configurator/index.js","webpack:///./src/components/ConfigurableCodeBlock/index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__","_components_ConfigurableCodeBlock__WEBPACK_IMPORTED_MODULE_6__","Header","withTheme","styled","h1","withConfig","displayName","componentId","_ref","theme","palette","secondary","contrastText","Wrapper","div","_ref2","dark","Topic","_ref3","children","a","createElement","GuidesPage","title","GridWrapper","GridContainer","react__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_AppBar__WEBPACK_IMPORTED_MODULE_3___default","position","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_4___default","container","spacing","GridItem","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","Object","assign","item","_material_ui_core_Card__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_CardContent__WEBPACK_IMPORTED_MODULE_6___default","FormControlWrapper","OriginalGrid","breakpoints","down","FormControl","InnerFormControl","ConfigurationOption","name","label","value","onChange","options","react_default","xs","sm","CodeBlockOptions_FormControl","InputLabel_default","htmlFor","Select_default","inputProps","id","map","MenuItem_default","key","CodeBlockOptions","_ref4","importType","usageParadigm","importModularity","Grid_default","CodeBlockOptions_ConfigurationOption","acorn","require","walk","escodegen","methods","configurator","_ref5","source","parsed","parse","sourceType","ancestor","ImportDeclaration","node","ancestors","nodeIndex","body","indexOf","specifiers","length","type","importedNames","specifier","imported","_ancestors$0$body","imports","importedName","expression","callee","arguments","splice","apply","concat","newSource","replace","shorthand","kind","declarations","properties","init","convertToCJS","CallExpression","includes","shift","object","property","convertToOO","handleImports","generate","format","indent","style","quotes","ConfigurableCodeBlock","_useContext","useContext","context","Grid","ConfigurableCodeBlock_CodeBlockOptions","_ref2$target","target","prism","language","tomorrow","showLineNumbers"],"mappings":"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","file":"component---src-pages-guides-js-9e0faa2dc60be6f58883.js","sourcesContent":["import React from 'react';\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport 'typeface-roboto';\r\nimport styled from 'styled-components';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport ConfigurableCodeBlock from '../components/ConfigurableCodeBlock';\r\n\r\nconst Header = withTheme()(styled.h1`\r\n  font-size: 1.7rem;\r\n  padding: 30px 12px 20px 12px;\r\n  margin: 0;\r\n  font-weight: 500;\r\n  color: ${({ theme }) => theme.palette.secondary.contrastText};\r\n`);\r\n\r\nconst Wrapper = withTheme()(styled.div`\r\n  background-color: ${({ theme }) => theme.palette.secondary.dark};\r\n`);\r\n\r\nconst Topic = ({ children }) => (\r\n  <Wrapper>\r\n    <Header>{children}</Header>\r\n  </Wrapper>\r\n);\r\n\r\nconst GuidesPage = () => (\r\n  <Layout>\r\n    <SEO title=\"Guides\" />\r\n    <Topic>Money Calculation and Manipulation</Topic>\r\n    <ConfigurableCodeBlock>\r\n      {`\r\n        import { Money } from 'wealth';\r\n        import { add, subtract, multiply, divide } from 'wealth/fn';\r\n\r\n        const price = Money.init('80.78', 'USD'); // $80.78\r\n        const discountPercentage = 10; // 10% discount\r\n        let discount = multiply(price, discountPercentage);\r\n        discount = divide(discount, 100);\r\n        const discountedPrice = subtract(price, discount); // $72.70\r\n        const shipping = Money.init('15.50', 'USD'); // $15.50\r\n        const total = add(price, shipping); // $88.20\r\n      `}\r\n    </ConfigurableCodeBlock>\r\n    <Topic>Money Comparison</Topic>\r\n    <ConfigurableCodeBlock>\r\n      {`\r\n        import { Money } from 'wealth';\r\n        import { lessThan } from 'wealth/fn';\r\n\r\n        const overdraft = Money.init('1000.00', 'GBP'); // $1000.00\r\n        const debt = Money.init('9.00', 'GBP'); // $9.00\r\n        const canBorrowMore = lessThan(debt, overdraft); // true\r\n      `}\r\n    </ConfigurableCodeBlock>\r\n    <Topic>Money Allocation</Topic>\r\n    <ConfigurableCodeBlock>\r\n      {`\r\n        import { Money } from 'wealth';\r\n        import { allocate, allocateTo } from 'wealth/fn';\r\n\r\n        // Allocation by ratios\r\n        const inheritance = Money.init('5000000', 'EUR');\r\n        const ratios = [63, 22, 15]; // ratios\r\n        const inheritedShares = allocate(inheritance, ratios);\r\n        // Equal Allocation\r\n        const expenses = Money.init('79595', 'EUR');\r\n        const expenseShares = allocateTo(expenses, 10); // Equal (or nearly equal) shares of expenses\r\n      `}\r\n    </ConfigurableCodeBlock>\r\n    <Topic>Currency</Topic>\r\n    <ConfigurableCodeBlock>\r\n      {`\r\n        import { Money, Currency } from 'wealth';\r\n        import {\r\n          getRegisteredCurrency,\r\n          getAllRegisteredCurrencies,\r\n          registerCurrency,\r\n          registerMultipleCurrencies,\r\n          isCurrencyRegistered,\r\n          deregisterCurrency\r\n        } from 'wealth/store';\r\n        import {\r\n          GBP\r\n        } from 'wealth/iso';\r\n\r\n        register(GBP);\r\n\r\n        register({\r\n          code: 'XBT',\r\n          symbol: 'Ƀ'\r\n        });\r\n\r\n        const gbpCurrencyInstance = new Currency('GBP');\r\n        const moneyA = new Money('900.00', gbpCurrencyInstance);\r\n        const moneyB = new Money('900.00', 'GBP');\r\n        const moneyC = new Money('900.00', 'XBT');\r\n      `}\r\n    </ConfigurableCodeBlock>\r\n    <Topic>Formatting and Parsing</Topic>\r\n    <ConfigurableCodeBlock>\r\n      {`\r\n        import { Money } from 'wealth';\r\n        import { register } from 'wealth/store';\r\n        import { USD } from 'wealth/iso';\r\n        import { format } from 'wealth/fn';\r\n\r\n        register(USD);\r\n\r\n        const money = Money.init('5000.00', 'USD');\r\n        money.format() === '$5,000.00'\r\n        money.format({\r\n          pattern: '%ns%s%v',\r\n          thousandsSeparator: ',',\r\n          decimalSeparator: '.'\r\n        }) === '5 000,00 $'\r\n      `}\r\n    </ConfigurableCodeBlock>\r\n    <Topic>Serialization</Topic>\r\n    <ConfigurableCodeBlock>\r\n      {`\r\n        import { Money } from 'wealth';\r\n\r\n        const money = Money.init('1.00', 'USD');\r\n        money.toJSON(); // {amount: '1.00', currency: 'USD'}\r\n        JSON.stringify(money); // {amount: '1.00', currency: 'USD'}\r\n      `}\r\n    </ConfigurableCodeBlock>\r\n    <Topic>Error Handling</Topic>\r\n    <ConfigurableCodeBlock>\r\n      {`\r\n        import {\r\n          WealthError,\r\n          CurrencyMismatchError,\r\n          InvalidCurrencyError,\r\n          WrongInputError\r\n        } from 'wealth/errors';\r\n\r\n        try {\r\n          // operations\r\n        }\r\n        catch(e) {\r\n          if(e instanceof CurrencyMismatchError) {\r\n            // Thrown when the two sides of the operation use different currencies\r\n          }\r\n          else if(e instanceof InvalidCurrencyError) {\r\n            // Thrown when invalid or missing currency code provided\r\n          }\r\n          else if(e instanceof WrongInputError) {\r\n            // Thrown when bad input is provided to various methods\r\n          }\r\n\r\n          if(e instanceof WealthError) {\r\n            // All custom errors produced by Wealth inherit \"WealthError\"\r\n          }\r\n          else {\r\n            // All other errors\r\n          }\r\n        }\r\n      `}\r\n    </ConfigurableCodeBlock>\r\n  </Layout>\r\n);\r\n\r\nexport default GuidesPage;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport styled from 'styled-components';\r\n\r\nconst GridWrapper = styled.div`\r\n  padding: 12px;\r\n`;\r\n\r\nexport const GridContainer = ({ children }) => (\r\n  <AppBar position=\"static\">\r\n    <GridWrapper>\r\n      <Grid container spacing={24}>\r\n        {children}\r\n      </Grid>\r\n    </GridWrapper>\r\n  </AppBar>\r\n);\r\n\r\nexport const GridItem = ({ children, ...props }) => (\r\n  <Grid item {...props}>\r\n      <Card>\r\n        <CardContent>\r\n          {children}\r\n        </CardContent>\r\n      </Card>\r\n  </Grid>\r\n);\r\n","import React from 'react';\r\nimport InnerFormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport OriginalGrid from '@material-ui/core/Grid';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport styled from 'styled-components';\r\n\r\nconst FormControlWrapper = withTheme()(styled(OriginalGrid)`\r\n  && {\r\n    display: flex;\r\n    ${({ theme }) => `\r\n        ${theme.breakpoints.down('xs')} {\r\n          margin-bottom: 30px;\r\n\r\n          &:last-child {\r\n            margin-bottom: 0;\r\n          }\r\n        }\r\n    `}\r\n  }\r\n`);\r\n\r\nconst FormControl = styled(InnerFormControl)`\r\n  && {\r\n    min-width: 150px;\r\n    margin: auto;\r\n  }\r\n`;\r\n\r\nconst ConfigurationOption = ({ name, label, value, onChange, options }) => (\r\n  <FormControlWrapper item xs={12} sm={4}>\r\n    <FormControl>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Select\r\n        value={value}\r\n        onChange={onChange}\r\n        inputProps={{\r\n          name,\r\n          id: name,\r\n        }}\r\n      >\r\n        {options.map(({ value, label }) => (\r\n          <MenuItem value={value} key={value}>\r\n            {label}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  </FormControlWrapper>\r\n);\r\n\r\nconst CodeBlockOptions = ({ importType, usageParadigm, importModularity, onChange }) => (\r\n  <OriginalGrid container>\r\n    <ConfigurationOption\r\n      label=\"Import type\"\r\n      name=\"importType\"\r\n      value={importType}\r\n      onChange={onChange}\r\n      options={[\r\n        {\r\n          value: 'esm',\r\n          label: 'ES Modules'\r\n        },\r\n        {\r\n          value: 'cjs',\r\n          label: 'Common JS'\r\n        }\r\n      ]}\r\n    />\r\n    <ConfigurationOption\r\n      label=\"Usage paradigm\"\r\n      name=\"usageParadigm\"\r\n      value={usageParadigm}\r\n      onChange={onChange}\r\n      options={[\r\n        {\r\n          value: 'fp',\r\n          label: 'Functional'\r\n        },\r\n        {\r\n          value: 'oo',\r\n          label: 'Object-oriented'\r\n        }\r\n      ]}\r\n    />\r\n    {\r\n      usageParadigm === 'oo' && (\r\n        <ConfigurationOption\r\n          label=\"Import modularity\"\r\n          name=\"importModularity\"\r\n          value={importModularity}\r\n          onChange={onChange}\r\n          options={[\r\n            {\r\n              value: 'full',\r\n              label: 'Full import'\r\n            },\r\n            {\r\n              value: 'modular',\r\n              label: 'Module augmentation'\r\n            }\r\n          ]}\r\n        />\r\n      )\r\n    }\r\n  </OriginalGrid>\r\n);\r\n\r\nexport default CodeBlockOptions;\r\n","const acorn = require('acorn');\r\nconst walk = require('acorn-walk');\r\nconst escodegen = require('escodegen');\r\n// const splitAt = require('split-at');\r\n\r\nconst generateESM = ({\r\n  importedNames\r\n}) => {\r\n  return importedNames.map(importedName => ({\r\n    type: 'ImportDeclaration',\r\n    specifiers: [],\r\n    source: {\r\n      type: 'Literal',\r\n      value: `wealth/methods/${importedName}`\r\n    }\r\n  }));\r\n};\r\n\r\nconst generateCJS = ({ importedNames }) => {\r\n  return importedNames.map(importedName => ({\r\n    \"type\": \"ExpressionStatement\",\r\n    \"expression\": {\r\n      \"type\": \"CallExpression\",\r\n      \"callee\": {\r\n        \"type\": \"Identifier\",\r\n        \"name\": \"require\"\r\n      },\r\n      \"arguments\": [\r\n        {\r\n          \"type\": \"Literal\",\r\n          \"value\": `wealth/node/methods/${importedName}`\r\n        }\r\n      ]\r\n    }\r\n  }));\r\n};\r\n\r\nconst convertToCJS = ({ importedNames, body, nodeIndex, source }) => {\r\n  const newSource = source.replace('wealth', 'wealth/node');\r\n\r\n  const imports = importedNames\r\n    .map(importedName => ({\r\n      type: 'Property',\r\n      shorthand: true,\r\n      key: {\r\n        type: 'Identifier',\r\n        name: importedName\r\n      },\r\n      kind: 'init',\r\n      value: {\r\n        type: 'Identifier',\r\n        name: importedName\r\n      }\r\n    }));\r\n\r\n  body[nodeIndex] = {\r\n    \"type\": \"VariableDeclaration\",\r\n    \"declarations\": [\r\n      {\r\n        \"type\": \"VariableDeclarator\",\r\n        \"id\": {\r\n          \"type\": \"ObjectPattern\",\r\n          \"properties\": imports\r\n        },\r\n        \"init\": {\r\n          \"type\": \"CallExpression\",\r\n          \"callee\": {\r\n            \"type\": \"Identifier\",\r\n            \"name\": \"require\"\r\n          },\r\n          \"arguments\": [\r\n            {\r\n              \"type\": \"Literal\",\r\n              \"value\": newSource\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ],\r\n    \"kind\": \"const\"\r\n  };\r\n};\r\n\r\nconst methods = [\r\n  'add',\r\n  'subtract',\r\n  'multiply',\r\n  'divide',\r\n  'absolute',\r\n  'ceil',\r\n  'floor',\r\n  'equals',\r\n  'greaterThan',\r\n  'greaterThanOrEqualTo',\r\n  'lessThan',\r\n  'lessThanOrEqualTo',\r\n  'allocate',\r\n  'allocateBy',\r\n  'format',\r\n  'parse'\r\n];\r\n\r\nconst convertToOO = (node) => {\r\n  let name = 'Money';\r\n\r\n  if (node.callee.name !== 'parse') {\r\n    ({ name } = node.arguments.shift());\r\n  }\r\n\r\n  node.callee = {\r\n    type: 'MemberExpression',\r\n    object: {\r\n      type: 'Identifier',\r\n      name\r\n    },\r\n    property: {\r\n      type: 'Identifier',\r\n      name: node.callee.name\r\n    }\r\n  };\r\n};\r\n\r\nconst handleImports = ({\r\n  parsed,\r\n  importType,\r\n  usageParadigm,\r\n  importModularity\r\n}) => {\r\n  walk.ancestor(parsed, {\r\n    ImportDeclaration(node, ancestors) {\r\n      let source = node.source.value;\r\n      const nodeIndex = ancestors[0].body.indexOf(node);\r\n\r\n      if (!node.specifiers.length || node.specifiers[0].type === 'ImportDefaultSpecifier') {\r\n        return;\r\n      }\r\n\r\n      const importedNames = node.specifiers.map(specifier => specifier.imported.name);\r\n\r\n      if (usageParadigm === 'oo' && source === 'wealth/fn') {\r\n        let imports = [];\r\n        if (importModularity === 'modular') {\r\n          if (importType === 'esm') {\r\n            imports = generateESM({\r\n              importedNames\r\n            });\r\n          }\r\n          else {\r\n            imports = generateCJS({\r\n              importedNames\r\n            });\r\n          }\r\n        }\r\n        ancestors[0].body.splice(nodeIndex, 1, ...imports);\r\n        return;\r\n      }\r\n\r\n      if (usageParadigm === 'oo' && source === 'wealth' && importModularity === 'full') {\r\n        node.source.value = source = 'wealth/full';\r\n      }\r\n\r\n      if (importType === 'esm') {\r\n        return;\r\n      }\r\n\r\n      convertToCJS({\r\n        body: ancestors[0].body,\r\n        importedNames,\r\n        nodeIndex,\r\n        source\r\n      })\r\n    },\r\n    CallExpression(node) {\r\n      if (usageParadigm === 'oo' && node.callee.type === 'Identifier' && methods.includes(node.callee.name)) {\r\n        convertToOO(node);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// const splitSourceIntoCommentsAndCodeBlocks = (source) => {\r\n//   const regex = /^\\/\\/.+$/gm;\r\n//   let indices = [];\r\n//   let match;\r\n//   while (match = regex.exec(source)) {\r\n//     indices = [\r\n//       ...indices,\r\n//       match.index,\r\n//       match.index + match[0].length\r\n//     ];\r\n//   }\r\n//   return splitAt(source, indices);\r\n// };\r\n\r\nconst configurator = ({\r\n  source,\r\n  importType,\r\n  usageParadigm,\r\n  importModularity\r\n}) => {\r\n  // console.log(splitSourceIntoCommentsAndCodeBlocks(source));\r\n  const parsed = acorn.parse(source, {\r\n    sourceType: 'module'\r\n  });\r\n\r\n  handleImports({\r\n    parsed,\r\n    importType,\r\n    usageParadigm,\r\n    importModularity\r\n  });\r\n\r\n  const code = escodegen.generate(parsed, {\r\n    format: {\r\n      indent: {\r\n        style: '  ',\r\n        quotes: 'single'\r\n      }\r\n    }\r\n  });\r\n\r\n  return code.replace(/\\{(.+)\\}/gm, '{ $1 }');\r\n};\r\n\r\nexport default configurator;\r\n","import React, { useContext } from 'react';\r\nimport { Prism as CodeBlock } from 'react-syntax-highlighter';\r\nimport { tomorrow } from 'react-syntax-highlighter/dist/styles/prism';\r\nimport { GridContainer, GridItem } from '../Grid';\r\nimport CodeBlockOptions from './CodeBlockOptions';\r\nimport configurator from './Configurator';\r\nimport { context } from './Provider';\r\n\r\nconst ConfigurableCodeBlock = ({ children }) => {\r\n  const {\r\n    value,\r\n    onChange\r\n  } = useContext(context);\r\n  return (\r\n    <GridContainer>\r\n        <GridItem xs={12}>\r\n          <CodeBlockOptions\r\n            onChange={({ target: { name, value } }) => onChange({ name, value })}\r\n            {...value}\r\n          />\r\n          <CodeBlock\r\n            language=\"javascript\"\r\n            style={tomorrow}\r\n            showLineNumbers\r\n          >\r\n            {configurator({\r\n              source: children,\r\n              ...value\r\n            })}\r\n          </CodeBlock>\r\n        </GridItem>\r\n      </GridContainer>\r\n  );\r\n}\r\n\r\nexport default ConfigurableCodeBlock;\r\n"],"sourceRoot":""}