[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Currency.js",
    "content": "import CurrencyStore from './CurrencyStore';\r\nimport Formatter from './Formatter';\r\nimport WrongInputError from './errors/WrongInputError';\r\n\r\n/**\r\n * @example <caption>Using code</caption>\r\n * let currency = new Currency('USD');\r\n *\r\n * @example <caption>Using existing currency object</caption>\r\n * let currency = new Currency(new Currency('USD'));\r\n *\r\n * @example <caption>Using custom settings to create a one-off currency without registering it</caption>\r\n * let currency = new Currency({\r\n *  code: 'ETH',\r\n *  symbol: 'Ξ'\r\n * });\r\n */\r\nexport default class Currency {\r\n\r\n\t/**\r\n\t * @param {string|object|Currency} currency - Currency string code, custom settings or instance of Currency\r\n\t */\r\n\tconstructor(currency) {\r\n\t\t/**\r\n\t\t * @type {object} - an object holding currency details such as decimal digits, etc.\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._currencySettings = this._preProcess(currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the parameter currency the same as the current currency\r\n\t * @param {string|Currency} currency - Currency string code or instance of Currency\r\n\t * @returns {boolean} - returns true if the parameter currency is the same as the current currency\r\n\t */\r\n\tis(currency) {\r\n\t\tcurrency = new Currency(currency);\r\n\t\treturn this.getCode() === currency.getCode();\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency settings\r\n\t * @returns {Object} - Currency settings\r\n\t */\r\n\tgetSettings() {\r\n\t\treturn this._currencySettings;\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency code\r\n\t * @returns {string} - Currency code\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.getCode();\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency code\r\n\t * @returns {string} - Currency code\r\n\t */\r\n\ttoJSON() {\r\n\t\treturn this.getCode();\r\n\t}\r\n\r\n\t/**\r\n\t * Clone the currency instance\r\n\t * @returns {Currency} - new Currency instance\r\n\t */\r\n\tclone() {\r\n\t\treturn new this.constructor(this.getCode());\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency code\r\n\t * @returns {string} - Currency code\r\n\t */\r\n\tgetCode() {\r\n\t\treturn this._currencySettings.code;\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency symbol\r\n\t * @returns {string} - Currency symbol\r\n\t */\r\n\tgetSymbol() {\r\n\t\treturn this._currencySettings.symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency thousands separator\r\n\t * @returns {string} - Currency thousands separator\r\n\t */\r\n\tgetThousandsSeparator() {\r\n\t\treturn this._currencySettings.thousandsSeparator;\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency decimal separator\r\n\t * @returns {string} - Currency decimal separator\r\n\t */\r\n\tgetDecimalSeparator() {\r\n\t\treturn this._currencySettings.decimalSeparator;\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency formatting pattern\r\n\t * @returns {string} - Currency format pattern\r\n\t */\r\n\tgetPattern() {\r\n\t\treturn this._currencySettings.pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the number of decimal digits for this currency\r\n\t * @returns {number} - Number of decimal digits\r\n\t */\r\n\tgetDecimalDigits() {\r\n\t\treturn this._currencySettings.decimalDigits;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the formatter for this currency\r\n\t * @returns {function|null|undefined} - Currency formatter\r\n\t */\r\n\tgetFormatter() {\r\n\t\treturn this._currencySettings.formatter;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the parser for this currency\r\n\t * @returns {function|null|undefined} - Currency parser\r\n\t */\r\n\tgetParser() {\r\n\t\treturn this._currencySettings.parser;\r\n\t}\r\n\r\n\t/**\r\n\t * Format a monetary value\r\n\t * @param {Money} value - Monetary value to be formatted\r\n\t * @param {object} [overrideSettings] - settings to override Currency's default formatting settings\r\n\t * @returns {string} - Formatted string of the value\r\n\t */\r\n\tformat(value, overrideSettings = {}) {\r\n\t\treturn Formatter.format(value, new Currency({\r\n\t\t\t...this._currencySettings,\r\n\t\t\t...overrideSettings\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Parse a monetary value from a formatted value (same as `unformat`)\r\n\t * @param {string} value - Formatted value to be parsed into a monetary value\r\n\t * @param {object} [overrideSettings] - settings to override Currency's default formatting settings\r\n\t * @returns {Money} - Parsed \"Money\" value\r\n\t */\r\n\tparse(value, overrideSettings = {}) {\r\n\t\treturn Formatter.parse(value, new Currency({\r\n\t\t\t...this._currencySettings,\r\n\t\t\t...overrideSettings\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Used by the constructor to pre-process the input\r\n\t * @param {string|object|Currency} currency - Currency code, settings or instance of Currency\r\n\t * @returns {object} - Currency settings\r\n\t */\r\n\t_preProcess(currency) {\r\n\t\tlet settings = {};\r\n\r\n\t\tif(currency instanceof Currency) {\r\n\t\t\tsettings = CurrencyStore.get(currency.getCode());\r\n\t\t}\r\n\t\telse if(typeof currency === 'string') {\r\n\t\t\tsettings = CurrencyStore.get(currency);\r\n\t\t}\r\n\t\telse if(typeof currency === 'object') {\r\n\t\t\tlet defaultSettings = {};\r\n\r\n\t\t\tif(currency.code) {\r\n\t\t\t\tdefaultSettings = CurrencyStore.get(currency.code);\r\n\t\t\t}\r\n\r\n\t\t\tsettings = {\r\n\t\t\t\t...defaultSettings,\r\n\t\t\t\t...settings\r\n\t\t\t};\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new WrongInputError('Invalid currency provided.');\r\n\t\t}\r\n\r\n\t\treturn settings;\r\n\t}\r\n\r\n\t/**\r\n\t * Register (or replace) a currency\r\n\t * @param {string} code - Currency code\r\n\t * @param {object} [settings] - Currency settings\r\n\t * @param {string} [settings.symbol=code] - Currency symbol (by default same as code)\r\n\t * @param {string} [settings.thousandsSeparator=','] - Currency thousands separator\r\n\t * @param {string} [settings.decimalSeparator='.'] -Currency decimal separator\r\n\t * @param {number} [settings.decimalDigits=2] - Currency decimal digits\r\n\t * @param {string} [settings.pattern='%ns%s%v'] - Currency formatting pattern. %ns is number sign's placeholder, %s is symbol's placeholder and $v is monetary value's placeholder.\r\n\t * @param {?function(value: Money): string} [settings.formatter] - Currency formatter, optional (used instead of the pattern)\r\n\t * @param {?function(value: string): Money} [settings.parser] - Currency parser, optional\r\n\t */\r\n\tstatic register(code, settings) {\r\n\t\treturn CurrencyStore.set(code, settings);\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency settings for the specified currency\r\n\t * @param {string} code - Currency code\r\n\t * @return {object} - Currency settings\r\n\t */\r\n\tstatic getSettings(code) {\r\n\t\treturn CurrencyStore.get(code);\r\n\t}\r\n\r\n\t/**\r\n\t * Get an array of currency settings for all currencies\r\n\t * @return {object[]} - Settings for all currencies\r\n\t */\r\n\tstatic getAllSettings() {\r\n\t\treturn CurrencyStore.getAll();\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/Currency.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Currency",
    "memberof": "src/Currency.js",
    "static": true,
    "longname": "src/Currency.js~Currency",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{Currency}",
    "description": "",
    "examples": [
      "<caption>Using code</caption>\nlet currency = new Currency('USD');",
      "<caption>Using existing currency object</caption>\nlet currency = new Currency(new Currency('USD'));",
      "<caption>Using custom settings to create a one-off currency without registering it</caption>\nlet currency = new Currency({\n code: 'ETH',\n symbol: 'Ξ'\n});"
    ],
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object",
          "Currency"
        ],
        "spread": false,
        "optional": false,
        "name": "currency",
        "description": "Currency string code, custom settings or instance of Currency"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_currencySettings",
    "memberof": "src/Currency.js~Currency",
    "static": false,
    "longname": "src/Currency.js~Currency#_currencySettings",
    "access": "private",
    "description": "",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "is",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#is",
    "access": "public",
    "description": "Check if the parameter currency the same as the current currency",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - returns true if the parameter currency is the same as the current currency"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Currency"
        ],
        "spread": false,
        "optional": false,
        "name": "currency",
        "description": "Currency string code or instance of Currency"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns true if the parameter currency is the same as the current currency"
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "getSettings",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getSettings",
    "access": "public",
    "description": "Get currency settings",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Currency settings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Currency settings"
    },
    "params": []
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#toString",
    "access": "public",
    "description": "Get currency code",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Currency code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Currency code"
    },
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#toJSON",
    "access": "public",
    "description": "Get currency code",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Currency code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Currency code"
    },
    "params": []
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#clone",
    "access": "public",
    "description": "Clone the currency instance",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Currency} - new Currency instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Currency"
      ],
      "spread": false,
      "description": "new Currency instance"
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "getCode",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getCode",
    "access": "public",
    "description": "Get currency code",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Currency code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Currency code"
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "getSymbol",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getSymbol",
    "access": "public",
    "description": "Get currency symbol",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Currency symbol"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Currency symbol"
    },
    "params": []
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "getThousandsSeparator",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getThousandsSeparator",
    "access": "public",
    "description": "Get currency thousands separator",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Currency thousands separator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Currency thousands separator"
    },
    "params": []
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "getDecimalSeparator",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getDecimalSeparator",
    "access": "public",
    "description": "Get currency decimal separator",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Currency decimal separator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Currency decimal separator"
    },
    "params": []
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "getPattern",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getPattern",
    "access": "public",
    "description": "Get currency formatting pattern",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Currency format pattern"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Currency format pattern"
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "getDecimalDigits",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getDecimalDigits",
    "access": "public",
    "description": "Get the number of decimal digits for this currency",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - Number of decimal digits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Number of decimal digits"
    },
    "params": []
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getFormatter",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getFormatter",
    "access": "public",
    "description": "Get the formatter for this currency",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function|null|undefined} - Currency formatter"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function",
        "null",
        "undefined"
      ],
      "spread": false,
      "description": "Currency formatter"
    },
    "params": []
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getParser",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#getParser",
    "access": "public",
    "description": "Get the parser for this currency",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function|null|undefined} - Currency parser"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function",
        "null",
        "undefined"
      ],
      "spread": false,
      "description": "Currency parser"
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "format",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#format",
    "access": "public",
    "description": "Format a monetary value",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Formatted string of the value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Monetary value to be formatted"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "overrideSettings",
        "description": "settings to override Currency's default formatting settings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formatted string of the value"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "parse",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#parse",
    "access": "public",
    "description": "Parse a monetary value from a formatted value (same as `unformat`)",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - Parsed \"Money\" value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Formatted value to be parsed into a monetary value"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "overrideSettings",
        "description": "settings to override Currency's default formatting settings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "Parsed \"Money\" value"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "_preProcess",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Currency.js~Currency#_preProcess",
    "access": "private",
    "description": "Used by the constructor to pre-process the input",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - Currency settings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object",
          "Currency"
        ],
        "spread": false,
        "optional": false,
        "name": "currency",
        "description": "Currency code, settings or instance of Currency"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Currency settings"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "register",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Currency.js~Currency.register",
    "access": "public",
    "description": "Register (or replace) a currency",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Currency code"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "settings",
        "description": "Currency settings"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "code",
        "defaultRaw": "code",
        "name": "settings.symbol",
        "description": "Currency symbol (by default same as code)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "settings.thousandsSeparator",
        "description": "Currency thousands separator"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'.'",
        "defaultRaw": "'.'",
        "name": "settings.decimalSeparator",
        "description": "Currency decimal separator"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "settings.decimalDigits",
        "description": "Currency decimal digits"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'%ns%s%v'",
        "defaultRaw": "'%ns%s%v'",
        "name": "settings.pattern",
        "description": "Currency formatting pattern. %ns is number sign's placeholder, %s is symbol's placeholder and $v is monetary value's placeholder."
      },
      {
        "nullable": true,
        "types": [
          "function(value: Money): string"
        ],
        "spread": false,
        "optional": true,
        "name": "settings.formatter",
        "description": "Currency formatter, optional (used instead of the pattern)"
      },
      {
        "nullable": true,
        "types": [
          "function(value: string): Money"
        ],
        "spread": false,
        "optional": true,
        "name": "settings.parser",
        "description": "Currency parser, optional"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "getSettings",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Currency.js~Currency.getSettings",
    "access": "public",
    "description": "Get currency settings for the specified currency",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Currency code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Currency settings"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getAllSettings",
    "memberof": "src/Currency.js~Currency",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Currency.js~Currency.getAllSettings",
    "access": "public",
    "description": "Get an array of currency settings for all currencies",
    "lineNumber": 225,
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "Settings for all currencies"
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/CurrencyStore.js",
    "content": "import ISOCurrencies from './data/iso-currencies';\r\nimport InvalidCurrencyError from './errors/InvalidCurrencyError';\r\n\r\n/**\r\n * Currency store\r\n * @example <caption>Set (register or replace) a currency</caption>\r\n * CurrencyStore.set('XBT', { // Settings is optional\r\n *  symbol: 'Ƀ', // Currency symbol (Default: same as code)\r\n *  thousandsSeparator: ',', // Currency thousands separator (Default: ',')\r\n *  decimalSeparator: '.', // Currency decimal separator (Default: '.')\r\n *  decimalDigits: 2, // Currency decimal digits (Default: 2)\r\n *  pattern: '%ns%s%v', // Currency pattern (Default: '%ns%s%v') - %ns is number sign's placeholder, %s is symbol's placeholder and $v is monetary value's placeholder.\r\n *  formatter: null, // Currency formatter (Default: null). Custom formatting function.\r\n *  parser: null // Currency parser (Default: null). Custom parsing function.\r\n * });\r\n *\r\n * @example <caption>Get currency settings</caption>\r\n * CurrencyStore.get('XBT');\r\n */\r\nexport default class CurrencyStore {\r\n\r\n\t/**\r\n\t * @type {object} - Internal data store\r\n\t * @private\r\n\t */\r\n\tstatic _data = {\r\n\t\t...ISOCurrencies\r\n\t};\r\n\r\n\t/**\r\n\t * Set (register or replace) a currency\r\n\t * @param {string} code - Currency code\r\n\t * @param {object} settings - Currency settings\r\n\t */\r\n\tstatic set(code, settings) {\r\n\t\tif(typeof code !== 'string' || !code) {\r\n\t\t\tthrow new InvalidCurrencyError('Invalid currency settings; code is required.');\r\n\t\t}\r\n\r\n\t\tsettings = {\r\n\t\t\t...settings,\r\n\t\t\tthousandsSeparator: ',',\r\n\t\t\tdecimalSeparator: '.',\r\n\t\t\tdecimalDigits: 2,\r\n\t\t\tpattern: '%ns%s%v',\r\n\t\t\tsymbol: settings.symbol || code,\r\n\t\t\tformatter: null,\r\n\t\t\tparser: null,\r\n\t\t\tcode\r\n\t\t};\r\n\r\n\t\tthis._data[code.toUpperCase()] = settings;\r\n\t}\r\n\r\n\t/**\r\n\t * Get currency settings\r\n\t * @param code - Currency code\r\n\t * @returns {object} - Currency settings\r\n\t */\r\n\tstatic get(code) {\r\n\t\treturn this._data[code.toUpperCase()];\r\n\t}\r\n\r\n\t/**\r\n\t * Check if currency has been registered\r\n\t * @param code - Currency code\r\n\t * @returns {boolean} - True if currency has been registered\r\n\t */\r\n\tstatic has(code) {\r\n\t\treturn !!this.get(code);\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a registered currency\r\n\t * @param code - Currency code\r\n\t */\r\n\tstatic del(code) {\r\n\t\tdelete this._data[code.toUpperCase()];\r\n\t}\r\n\r\n\t/**\r\n\t * Get all registered currencies\r\n\t * @returns {array} - List of currencies, sorted by code alphabetically\r\n\t */\r\n\tstatic getAll() {\r\n\t\treturn Object\r\n\t\t\t.values(this._data)\r\n\t\t\t.reduce((settings, all) => all.concat([settings]), [])\r\n\t\t\t.sort((a, b) => a.code.localeCompare(b.code));\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/CurrencyStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "CurrencyStore",
    "memberof": "src/CurrencyStore.js",
    "static": true,
    "longname": "src/CurrencyStore.js~CurrencyStore",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{CurrencyStore}",
    "description": "Currency store",
    "examples": [
      "<caption>Set (register or replace) a currency</caption>\nCurrencyStore.set('XBT', { // Settings is optional\n symbol: 'Ƀ', // Currency symbol (Default: same as code)\n thousandsSeparator: ',', // Currency thousands separator (Default: ',')\n decimalSeparator: '.', // Currency decimal separator (Default: '.')\n decimalDigits: 2, // Currency decimal digits (Default: 2)\n pattern: '%ns%s%v', // Currency pattern (Default: '%ns%s%v') - %ns is number sign's placeholder, %s is symbol's placeholder and $v is monetary value's placeholder.\n formatter: null, // Currency formatter (Default: null). Custom formatting function.\n parser: null // Currency parser (Default: null). Custom parsing function.\n});",
      "<caption>Get currency settings</caption>\nCurrencyStore.get('XBT');"
    ],
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_data",
    "memberof": "src/CurrencyStore.js~CurrencyStore",
    "static": true,
    "longname": "src/CurrencyStore.js~CurrencyStore._data",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "set",
    "memberof": "src/CurrencyStore.js~CurrencyStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CurrencyStore.js~CurrencyStore.set",
    "access": "public",
    "description": "Set (register or replace) a currency",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Currency code"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "Currency settings"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "get",
    "memberof": "src/CurrencyStore.js~CurrencyStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CurrencyStore.js~CurrencyStore.get",
    "access": "public",
    "description": "Get currency settings",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - Currency settings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Currency code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Currency settings"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "has",
    "memberof": "src/CurrencyStore.js~CurrencyStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CurrencyStore.js~CurrencyStore.has",
    "access": "public",
    "description": "Check if currency has been registered",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - True if currency has been registered"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Currency code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if currency has been registered"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "del",
    "memberof": "src/CurrencyStore.js~CurrencyStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CurrencyStore.js~CurrencyStore.del",
    "access": "public",
    "description": "Delete a registered currency",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Currency code"
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getAll",
    "memberof": "src/CurrencyStore.js~CurrencyStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/CurrencyStore.js~CurrencyStore.getAll",
    "access": "public",
    "description": "Get all registered currencies",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} - List of currencies, sorted by code alphabetically"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "List of currencies, sorted by code alphabetically"
    },
    "params": []
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/data/iso-currencies.js",
    "content": "export default {\r\n\t\"AED\": {\r\n\t\t\"code\": \"AED\",\r\n\t\t\"symbol\": \"د.إ.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"AFN\": {\r\n\t\t\"code\": \"AFN\",\r\n\t\t\"symbol\": \"؋\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"ALL\": {\r\n\t\t\"code\": \"ALL\",\r\n\t\t\"symbol\": \"Lek\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"AMD\": {\r\n\t\t\"code\": \"AMD\",\r\n\t\t\"symbol\": \"֏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"ANG\": {\r\n\t\t\"code\": \"ANG\",\r\n\t\t\"symbol\": \"ƒ\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"AOA\": {\r\n\t\t\"code\": \"AOA\",\r\n\t\t\"symbol\": \"Kz\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"ARS\": {\r\n\t\t\"code\": \"ARS\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"AUD\": {\r\n\t\t\"code\": \"AUD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"AWG\": {\r\n\t\t\"code\": \"AWG\",\r\n\t\t\"symbol\": \"ƒ\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"AZN\": {\r\n\t\t\"code\": \"AZN\",\r\n\t\t\"symbol\": \"₼\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"BAM\": {\r\n\t\t\"code\": \"BAM\",\r\n\t\t\"symbol\": \"КМ\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"BBD\": {\r\n\t\t\"code\": \"BBD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"BDT\": {\r\n\t\t\"code\": \"BDT\",\r\n\t\t\"symbol\": \"৳\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"BGN\": {\r\n\t\t\"code\": \"BGN\",\r\n\t\t\"symbol\": \"лв.\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"BHD\": {\r\n\t\t\"code\": \"BHD\",\r\n\t\t\"symbol\": \"د.ب.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 3,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"BIF\": {\r\n\t\t\"code\": \"BIF\",\r\n\t\t\"symbol\": \"FBu\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"BMD\": {\r\n\t\t\"code\": \"BMD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"BND\": {\r\n\t\t\"code\": \"BND\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"BOB\": {\r\n\t\t\"code\": \"BOB\",\r\n\t\t\"symbol\": \"Bs\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"BRL\": {\r\n\t\t\"code\": \"BRL\",\r\n\t\t\"symbol\": \"R$\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"BSD\": {\r\n\t\t\"code\": \"BSD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"BTC\": {\r\n\t\t\"code\": \"BTC\",\r\n\t\t\"symbol\": \"Ƀ\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"BTN\": {\r\n\t\t\"code\": \"BTN\",\r\n\t\t\"symbol\": \"Nu.\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 1,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"BWP\": {\r\n\t\t\"code\": \"BWP\",\r\n\t\t\"symbol\": \"P\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"BYR\": {\r\n\t\t\"code\": \"BYR\",\r\n\t\t\"symbol\": \"р.\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"BZD\": {\r\n\t\t\"code\": \"BZD\",\r\n\t\t\"symbol\": \"BZ$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"CAD\": {\r\n\t\t\"code\": \"CAD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"CDF\": {\r\n\t\t\"code\": \"CDF\",\r\n\t\t\"symbol\": \"FC\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"CHF\": {\r\n\t\t\"code\": \"CHF\",\r\n\t\t\"symbol\": \"CHF\",\r\n\t\t\"thousandsSeparator\": \"'\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"CLP\": {\r\n\t\t\"code\": \"CLP\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"CNY\": {\r\n\t\t\"code\": \"CNY\",\r\n\t\t\"symbol\": \"¥\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"COP\": {\r\n\t\t\"code\": \"COP\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"CRC\": {\r\n\t\t\"code\": \"CRC\",\r\n\t\t\"symbol\": \"₡\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"CUC\": {\r\n\t\t\"code\": \"CUC\",\r\n\t\t\"symbol\": \"CUC\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"CUP\": {\r\n\t\t\"code\": \"CUP\",\r\n\t\t\"symbol\": \"$MN\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"CVE\": {\r\n\t\t\"code\": \"CVE\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"CZK\": {\r\n\t\t\"code\": \"CZK\",\r\n\t\t\"symbol\": \"Kč\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"DJF\": {\r\n\t\t\"code\": \"DJF\",\r\n\t\t\"symbol\": \"Fdj\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"DKK\": {\r\n\t\t\"code\": \"DKK\",\r\n\t\t\"symbol\": \"kr.\",\r\n\t\t\"thousandsSeparator\": \"\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"DOP\": {\r\n\t\t\"code\": \"DOP\",\r\n\t\t\"symbol\": \"RD$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"DZD\": {\r\n\t\t\"code\": \"DZD\",\r\n\t\t\"symbol\": \"د.ج.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"EGP\": {\r\n\t\t\"code\": \"EGP\",\r\n\t\t\"symbol\": \"ج.م.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"ERN\": {\r\n\t\t\"code\": \"ERN\",\r\n\t\t\"symbol\": \"Nfk\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"ETB\": {\r\n\t\t\"code\": \"ETB\",\r\n\t\t\"symbol\": \"ETB\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"EUR\": {\r\n\t\t\"code\": \"EUR\",\r\n\t\t\"symbol\": \"€\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"FJD\": {\r\n\t\t\"code\": \"FJD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"FKP\": {\r\n\t\t\"code\": \"FKP\",\r\n\t\t\"symbol\": \"£\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"GBP\": {\r\n\t\t\"code\": \"GBP\",\r\n\t\t\"symbol\": \"£\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"GEL\": {\r\n\t\t\"code\": \"GEL\",\r\n\t\t\"symbol\": \"Lari\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"GHS\": {\r\n\t\t\"code\": \"GHS\",\r\n\t\t\"symbol\": \"₵\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"GIP\": {\r\n\t\t\"code\": \"GIP\",\r\n\t\t\"symbol\": \"£\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"GMD\": {\r\n\t\t\"code\": \"GMD\",\r\n\t\t\"symbol\": \"D\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"GNF\": {\r\n\t\t\"code\": \"GNF\",\r\n\t\t\"symbol\": \"FG\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"GTQ\": {\r\n\t\t\"code\": \"GTQ\",\r\n\t\t\"symbol\": \"Q\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"GYD\": {\r\n\t\t\"code\": \"GYD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"HKD\": {\r\n\t\t\"code\": \"HKD\",\r\n\t\t\"symbol\": \"HK$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"HNL\": {\r\n\t\t\"code\": \"HNL\",\r\n\t\t\"symbol\": \"L.\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"HRK\": {\r\n\t\t\"code\": \"HRK\",\r\n\t\t\"symbol\": \"kn\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"HTG\": {\r\n\t\t\"code\": \"HTG\",\r\n\t\t\"symbol\": \"G\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"HUF\": {\r\n\t\t\"code\": \"HUF\",\r\n\t\t\"symbol\": \"Ft\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"IDR\": {\r\n\t\t\"code\": \"IDR\",\r\n\t\t\"symbol\": \"Rp\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"ILS\": {\r\n\t\t\"code\": \"ILS\",\r\n\t\t\"symbol\": \"₪\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"INR\": {\r\n\t\t\"code\": \"INR\",\r\n\t\t\"symbol\": \"₹\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"IQD\": {\r\n\t\t\"code\": \"IQD\",\r\n\t\t\"symbol\": \"د.ع.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"IRR\": {\r\n\t\t\"code\": \"IRR\",\r\n\t\t\"symbol\": \"﷼\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \"/\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"ISK\": {\r\n\t\t\"code\": \"ISK\",\r\n\t\t\"symbol\": \"kr.\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"JMD\": {\r\n\t\t\"code\": \"JMD\",\r\n\t\t\"symbol\": \"J$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"JOD\": {\r\n\t\t\"code\": \"JOD\",\r\n\t\t\"symbol\": \"د.ا.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 3,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"JPY\": {\r\n\t\t\"code\": \"JPY\",\r\n\t\t\"symbol\": \"¥\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"KES\": {\r\n\t\t\"code\": \"KES\",\r\n\t\t\"symbol\": \"KSh\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"KGS\": {\r\n\t\t\"code\": \"KGS\",\r\n\t\t\"symbol\": \"сом\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \"-\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"KHR\": {\r\n\t\t\"code\": \"KHR\",\r\n\t\t\"symbol\": \"៛\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"KMF\": {\r\n\t\t\"code\": \"KMF\",\r\n\t\t\"symbol\": \"CF\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"KPW\": {\r\n\t\t\"code\": \"KPW\",\r\n\t\t\"symbol\": \"₩\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"KRW\": {\r\n\t\t\"code\": \"KRW\",\r\n\t\t\"symbol\": \"₩\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"KWD\": {\r\n\t\t\"code\": \"KWD\",\r\n\t\t\"symbol\": \"د.ك.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 3,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"KYD\": {\r\n\t\t\"code\": \"KYD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"KZT\": {\r\n\t\t\"code\": \"KZT\",\r\n\t\t\"symbol\": \"₸\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \"-\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"LAK\": {\r\n\t\t\"code\": \"LAK\",\r\n\t\t\"symbol\": \"₭\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"LBP\": {\r\n\t\t\"code\": \"LBP\",\r\n\t\t\"symbol\": \"ل.ل.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"LKR\": {\r\n\t\t\"code\": \"LKR\",\r\n\t\t\"symbol\": \"₨\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"LRD\": {\r\n\t\t\"code\": \"LRD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"LSL\": {\r\n\t\t\"code\": \"LSL\",\r\n\t\t\"symbol\": \"M\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"LYD\": {\r\n\t\t\"code\": \"LYD\",\r\n\t\t\"symbol\": \"د.ل.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 3,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MAD\": {\r\n\t\t\"code\": \"MAD\",\r\n\t\t\"symbol\": \"د.م.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"MDL\": {\r\n\t\t\"code\": \"MDL\",\r\n\t\t\"symbol\": \"lei\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"MGA\": {\r\n\t\t\"code\": \"MGA\",\r\n\t\t\"symbol\": \"Ar\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MKD\": {\r\n\t\t\"code\": \"MKD\",\r\n\t\t\"symbol\": \"ден.\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"MMK\": {\r\n\t\t\"code\": \"MMK\",\r\n\t\t\"symbol\": \"K\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MNT\": {\r\n\t\t\"code\": \"MNT\",\r\n\t\t\"symbol\": \"₮\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MOP\": {\r\n\t\t\"code\": \"MOP\",\r\n\t\t\"symbol\": \"MOP$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MRO\": {\r\n\t\t\"code\": \"MRO\",\r\n\t\t\"symbol\": \"UM\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"MTL\": {\r\n\t\t\"code\": \"MTL\",\r\n\t\t\"symbol\": \"₤\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MUR\": {\r\n\t\t\"code\": \"MUR\",\r\n\t\t\"symbol\": \"₨\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MVR\": {\r\n\t\t\"code\": \"MVR\",\r\n\t\t\"symbol\": \"MVR\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 1,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"MWK\": {\r\n\t\t\"code\": \"MWK\",\r\n\t\t\"symbol\": \"MK\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MXN\": {\r\n\t\t\"code\": \"MXN\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MYR\": {\r\n\t\t\"code\": \"MYR\",\r\n\t\t\"symbol\": \"RM\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"MZN\": {\r\n\t\t\"code\": \"MZN\",\r\n\t\t\"symbol\": \"MT\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"NAD\": {\r\n\t\t\"code\": \"NAD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"NGN\": {\r\n\t\t\"code\": \"NGN\",\r\n\t\t\"symbol\": \"₦\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"NIO\": {\r\n\t\t\"code\": \"NIO\",\r\n\t\t\"symbol\": \"C$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"NOK\": {\r\n\t\t\"code\": \"NOK\",\r\n\t\t\"symbol\": \"kr\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"NPR\": {\r\n\t\t\"code\": \"NPR\",\r\n\t\t\"symbol\": \"₨\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"NZD\": {\r\n\t\t\"code\": \"NZD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"OMR\": {\r\n\t\t\"code\": \"OMR\",\r\n\t\t\"symbol\": \"﷼\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 3,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"PAB\": {\r\n\t\t\"code\": \"PAB\",\r\n\t\t\"symbol\": \"B/.\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"PEN\": {\r\n\t\t\"code\": \"PEN\",\r\n\t\t\"symbol\": \"S/.\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"PGK\": {\r\n\t\t\"code\": \"PGK\",\r\n\t\t\"symbol\": \"K\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"PHP\": {\r\n\t\t\"code\": \"PHP\",\r\n\t\t\"symbol\": \"₱\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"PKR\": {\r\n\t\t\"code\": \"PKR\",\r\n\t\t\"symbol\": \"₨\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"PLN\": {\r\n\t\t\"code\": \"PLN\",\r\n\t\t\"symbol\": \"zł\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"PYG\": {\r\n\t\t\"code\": \"PYG\",\r\n\t\t\"symbol\": \"₲\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"QAR\": {\r\n\t\t\"code\": \"QAR\",\r\n\t\t\"symbol\": \"﷼\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"RON\": {\r\n\t\t\"code\": \"RON\",\r\n\t\t\"symbol\": \"lei\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"RSD\": {\r\n\t\t\"code\": \"RSD\",\r\n\t\t\"symbol\": \"Дин.\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"RUB\": {\r\n\t\t\"code\": \"RUB\",\r\n\t\t\"symbol\": \"₽\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"RWF\": {\r\n\t\t\"code\": \"RWF\",\r\n\t\t\"symbol\": \"RWF\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"SAR\": {\r\n\t\t\"code\": \"SAR\",\r\n\t\t\"symbol\": \"﷼\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"SBD\": {\r\n\t\t\"code\": \"SBD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SCR\": {\r\n\t\t\"code\": \"SCR\",\r\n\t\t\"symbol\": \"₨\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SDD\": {\r\n\t\t\"code\": \"SDD\",\r\n\t\t\"symbol\": \"LSd\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"SDG\": {\r\n\t\t\"code\": \"SDG\",\r\n\t\t\"symbol\": \"£‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SEK\": {\r\n\t\t\"code\": \"SEK\",\r\n\t\t\"symbol\": \"kr\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"SGD\": {\r\n\t\t\"code\": \"SGD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SHP\": {\r\n\t\t\"code\": \"SHP\",\r\n\t\t\"symbol\": \"£\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SLL\": {\r\n\t\t\"code\": \"SLL\",\r\n\t\t\"symbol\": \"Le\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SOS\": {\r\n\t\t\"code\": \"SOS\",\r\n\t\t\"symbol\": \"S\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SRD\": {\r\n\t\t\"code\": \"SRD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"STD\": {\r\n\t\t\"code\": \"STD\",\r\n\t\t\"symbol\": \"Db\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SVC\": {\r\n\t\t\"code\": \"SVC\",\r\n\t\t\"symbol\": \"₡\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"SYP\": {\r\n\t\t\"code\": \"SYP\",\r\n\t\t\"symbol\": \"£\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"SZL\": {\r\n\t\t\"code\": \"SZL\",\r\n\t\t\"symbol\": \"E\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"THB\": {\r\n\t\t\"code\": \"THB\",\r\n\t\t\"symbol\": \"฿\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"TJS\": {\r\n\t\t\"code\": \"TJS\",\r\n\t\t\"symbol\": \"TJS\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \";\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"TMT\": {\r\n\t\t\"code\": \"TMT\",\r\n\t\t\"symbol\": \"m\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"TND\": {\r\n\t\t\"code\": \"TND\",\r\n\t\t\"symbol\": \"د.ت.‏\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 3,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"TOP\": {\r\n\t\t\"code\": \"TOP\",\r\n\t\t\"symbol\": \"T$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"TRY\": {\r\n\t\t\"code\": \"TRY\",\r\n\t\t\"symbol\": \"TL\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"TTD\": {\r\n\t\t\"code\": \"TTD\",\r\n\t\t\"symbol\": \"TT$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"TVD\": {\r\n\t\t\"code\": \"TVD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"TWD\": {\r\n\t\t\"code\": \"TWD\",\r\n\t\t\"symbol\": \"NT$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"TZS\": {\r\n\t\t\"code\": \"TZS\",\r\n\t\t\"symbol\": \"TSh\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"UAH\": {\r\n\t\t\"code\": \"UAH\",\r\n\t\t\"symbol\": \"₴\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"UGX\": {\r\n\t\t\"code\": \"UGX\",\r\n\t\t\"symbol\": \"USh\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"USD\": {\r\n\t\t\"code\": \"USD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"UYU\": {\r\n\t\t\"code\": \"UYU\",\r\n\t\t\"symbol\": \"$U\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"UZS\": {\r\n\t\t\"code\": \"UZS\",\r\n\t\t\"symbol\": \"сўм\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"VEB\": {\r\n\t\t\"code\": \"VEB\",\r\n\t\t\"symbol\": \"Bs.\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"VEF\": {\r\n\t\t\"code\": \"VEF\",\r\n\t\t\"symbol\": \"Bs. F.\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"VND\": {\r\n\t\t\"code\": \"VND\",\r\n\t\t\"symbol\": \"₫\",\r\n\t\t\"thousandsSeparator\": \".\",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 1,\r\n\t\t\"pattern\": \"%ns%v %s\"\r\n\t},\r\n\t\"VUV\": {\r\n\t\t\"code\": \"VUV\",\r\n\t\t\"symbol\": \"VT\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 0,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"WST\": {\r\n\t\t\"code\": \"WST\",\r\n\t\t\"symbol\": \"WS$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"XAF\": {\r\n\t\t\"code\": \"XAF\",\r\n\t\t\"symbol\": \"F\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"XCD\": {\r\n\t\t\"code\": \"XCD\",\r\n\t\t\"symbol\": \"$\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"XOF\": {\r\n\t\t\"code\": \"XOF\",\r\n\t\t\"symbol\": \"F\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"XPF\": {\r\n\t\t\"code\": \"XPF\",\r\n\t\t\"symbol\": \"F\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%v%s\"\r\n\t},\r\n\t\"YER\": {\r\n\t\t\"code\": \"YER\",\r\n\t\t\"symbol\": \"﷼\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%s %ns%v\"\r\n\t},\r\n\t\"ZAR\": {\r\n\t\t\"code\": \"ZAR\",\r\n\t\t\"symbol\": \"R\",\r\n\t\t\"thousandsSeparator\": \" \",\r\n\t\t\"decimalSeparator\": \",\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"ZMW\": {\r\n\t\t\"code\": \"ZMW\",\r\n\t\t\"symbol\": \"ZK\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t},\r\n\t\"WON\": {\r\n\t\t\"code\": \"WON\",\r\n\t\t\"symbol\": \"₩\",\r\n\t\t\"thousandsSeparator\": \",\",\r\n\t\t\"decimalSeparator\": \".\",\r\n\t\t\"decimalDigits\": 2,\r\n\t\t\"pattern\": \"%ns%s%v\"\r\n\t}\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/data/iso-currencies.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/errors/CurrencyMismatchError.js",
    "content": "import WealthError from './WealthError';\r\n\r\n/**\r\n * Error thrown when the currency of a parameter doesn't match the currency of the current \"Money\" object.\r\n * @example\r\n * try {\r\n *  // operation\r\n * }\r\n * catch(e) {\r\n *  if(e instanceof CurrencyMismatchError) {\r\n *      // handle error\r\n *  }\r\n * }\r\n */\r\nexport default class CurrencyMismatchError extends WealthError {\r\n\r\n\t/**\r\n\t * @param {string} message - Error message\r\n\t */\r\n\tconstructor(message = 'Currency mismatch between values') {\r\n\t\tsuper(message);\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/errors/CurrencyMismatchError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "CurrencyMismatchError",
    "memberof": "src/errors/CurrencyMismatchError.js",
    "static": true,
    "longname": "src/errors/CurrencyMismatchError.js~CurrencyMismatchError",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{CurrencyMismatchError}",
    "description": "Error thrown when the currency of a parameter doesn't match the currency of the current \"Money\" object.",
    "examples": [
      "try {\n // operation\n}\ncatch(e) {\n if(e instanceof CurrencyMismatchError) {\n     // handle error\n }\n}"
    ],
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/errors/WealthError.js~WealthError"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/CurrencyMismatchError.js~CurrencyMismatchError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/CurrencyMismatchError.js~CurrencyMismatchError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/errors/InvalidCurrencyError.js",
    "content": "import WealthError from './WealthError';\r\n\r\n/**\r\n * Error thrown when invalid currency is provided\r\n * @example\r\n * try {\r\n *  // operation\r\n * }\r\n * catch(e) {\r\n *  if(e instanceof InvalidCurrencyError) {\r\n *      // handle error\r\n *  }\r\n * }\r\n */\r\nexport default class InvalidCurrencyError extends WealthError {\r\n\r\n\t/**\r\n\t * @param {string} message - Error message\r\n\t */\r\n\tconstructor(message = 'Invalid currency') {\r\n\t\tsuper(message);\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/errors/InvalidCurrencyError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "InvalidCurrencyError",
    "memberof": "src/errors/InvalidCurrencyError.js",
    "static": true,
    "longname": "src/errors/InvalidCurrencyError.js~InvalidCurrencyError",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{InvalidCurrencyError}",
    "description": "Error thrown when invalid currency is provided",
    "examples": [
      "try {\n // operation\n}\ncatch(e) {\n if(e instanceof InvalidCurrencyError) {\n     // handle error\n }\n}"
    ],
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/errors/WealthError.js~WealthError"
    ]
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/InvalidCurrencyError.js~InvalidCurrencyError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/InvalidCurrencyError.js~InvalidCurrencyError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/errors/WealthError.js",
    "content": "import ExtendableError from 'es6-error';\r\n\r\n/**\r\n * The base error for all custom errors thrown by the \"Wealth\" library.\r\n * It's useful when trying to catch all types of \"Wealth\" errors.\r\n * @example\r\n * try {\r\n *  // operation\r\n * }\r\n * catch(e) {\r\n *  if(e instanceof WealthError) {\r\n *      // handle error\r\n *  }\r\n * }\r\n */\r\nexport default class WealthError extends ExtendableError {\r\n\r\n\t/**\r\n\t * @param {string} message - Error message\r\n\t */\r\n\tconstructor(message = 'Wealth error') {\r\n\t\tsuper(message);\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/errors/WealthError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "WealthError",
    "memberof": "src/errors/WealthError.js",
    "static": true,
    "longname": "src/errors/WealthError.js~WealthError",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{WealthError}",
    "description": "The base error for all custom errors thrown by the \"Wealth\" library.\nIt's useful when trying to catch all types of \"Wealth\" errors.",
    "examples": [
      "try {\n // operation\n}\ncatch(e) {\n if(e instanceof WealthError) {\n     // handle error\n }\n}"
    ],
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "es6-error~ExtendableError"
    ]
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/WealthError.js~WealthError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/WealthError.js~WealthError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/errors/WrongInputError.js",
    "content": "import WealthError from './WealthError';\r\n\r\n/**\r\n * Error thrown when the input argument is wrong\r\n * @example\r\n * try {\r\n *  // operation\r\n * }\r\n * catch(e) {\r\n *  if(e instanceof WrongInputError) {\r\n *      // handle error\r\n *  }\r\n * }\r\n */\r\nexport default class WrongInputError extends WealthError {\r\n\r\n\t/**\r\n\t * @param {string} message - Error message\r\n\t */\r\n\tconstructor(message = 'Wrong input argument') {\r\n\t\tsuper(message);\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/errors/WrongInputError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "WrongInputError",
    "memberof": "src/errors/WrongInputError.js",
    "static": true,
    "longname": "src/errors/WrongInputError.js~WrongInputError",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{WrongInputError}",
    "description": "Error thrown when the input argument is wrong",
    "examples": [
      "try {\n // operation\n}\ncatch(e) {\n if(e instanceof WrongInputError) {\n     // handle error\n }\n}"
    ],
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/errors/WealthError.js~WealthError"
    ]
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/WrongInputError.js~WrongInputError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/WrongInputError.js~WrongInputError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      }
    ]
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/Formatter.js",
    "content": "import InvalidCurrencyError from './errors/InvalidCurrencyError';\r\nimport CurrencyStore from './CurrencyStore';\r\nimport Money from './Money';\r\nimport Currency from './Currency';\r\n\r\n/**\r\n * @example <caption>Format value based on internal currency</caption>\r\n * Formatter.format(value);\r\n *\r\n * @example <caption>Format value based on currency parameter</caption>\r\n * Formatter.format(value, new Currency('USD'));\r\n *\r\n * @example <caption>Format value based on currency code</caption>\r\n * Formatter.format(value, 'USD');\r\n *\r\n * @example <caption>Format value based on custom settings</caption>\r\n * Formatter.format(value, {\r\n *  code: 'EUR',\r\n *  pattern: '%s%v'\r\n * });\r\n */\r\nexport default class Formatter {\r\n\r\n\t/**\r\n\t * Format money based on settings\r\n\t * @param {Money} value - Monetary value to be formatted\r\n\t * @param {object|string|Currency} [settings] - Formatting settings, currency code or currency\r\n\t * @returns {string} - Formatted money string\r\n\t */\r\n\tstatic format(value, settings) {\r\n\t\tconst\r\n\t\t\tdetails = this._getFormattingDetails(value, settings),\r\n\t\t\t{\r\n\t\t\t\tsymbol,\r\n\t\t\t\tcode,\r\n\t\t\t\tdecimalDigits,\r\n\t\t\t\tpattern,\r\n\t\t\t\tformatter\r\n\t\t\t} = details;\r\n\r\n\t\tif(typeof formatter === 'function') {\r\n\t\t\treturn formatter(value, details);\r\n\t\t}\r\n\r\n\t\tlet formatted = pattern.replace('%v', details.value.absoluteValue().toFormat(decimalDigits));\r\n\r\n\t\tformatted = formatted.replace('%ns', details.value.isNegative() ? '-' : '');\r\n\r\n\t\tif(details.value.isInteger()) {\r\n\t\t\tformatted = formatted.replace('%i', details.value.toFormat(0));\r\n\t\t}\r\n\r\n\t\tif(symbol) {\r\n\t\t\tformatted = formatted.replace('%s', symbol);\r\n\t\t}\r\n\r\n\t\tif(code) {\r\n\t\t\tformatted = formatted.replace('%c', code);\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse money based on settings\r\n\t * @param {string} value - Monetary value to be parsed\r\n\t * @param {object|string|Currency} settings - Parsing settings, currency code or currency\r\n\t * @returns {Money} - Parsed \"Money\" value\r\n\t */\r\n\tstatic parse(value, settings) {\r\n\t\tlet\r\n\t\t\toptions = this._getOptions(settings),\r\n\t\t\t{\r\n\t\t\t\tsymbol,\r\n\t\t\t\tcode,\r\n\t\t\t\tthousandsSeparator,\r\n\t\t\t\tdecimalSeparator,\r\n\t\t\t\tparser\r\n\t\t\t} = options;\r\n\r\n\t\tif(typeof parser === 'function') {\r\n\t\t\treturn parser(value, options);\r\n\t\t}\r\n\r\n\t\tvalue = this._replaceAll(value, thousandsSeparator, '');\r\n\t\tvalue = this._replaceAll(value, symbol, '');\r\n\t\tvalue = this._replaceAll(value, code, '');\r\n\t\tvalue = this._replaceAll(value, decimalSeparator, '');\r\n\t\tvalue =\tvalue.replace(/\\s/g, '');\r\n\r\n\t\treturn new Money(value, code);\r\n\t}\r\n\r\n\t/**\r\n\t * Replace all case-insensitive instances of a string in another string\r\n\t * @param {string} source - source string\r\n\t * @param {string} search - search string\r\n\t * @param {string} replacement - replacement string\r\n\t * @returns {string} - final string result\r\n\t * @private\r\n\t */\r\n\tstatic _replaceAll(source, search, replacement) {\r\n\t\tlet\r\n\t\t\tesc = search.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'),\r\n\t\t\treg = new RegExp(esc, 'ig');\r\n\t\treturn source.replace(reg, replacement);\r\n\t}\r\n\r\n\t/**\r\n\t * Get formatting details\r\n\t * @param {Money} value - Monetary value to be formatted\r\n\t * @param {object|string|Currency} [settings] - Formatting settings, currency code or currency\r\n\t * @returns {{symbol: string, code: string, value: BigNumber, decimalDigits: number, pattern: string}} - Formatting details\r\n\t * @private\r\n\t */\r\n\tstatic _getFormattingDetails(value, settings) {\r\n\t\tlet {\r\n\t\t\tsymbol,\r\n\t\t\tcode,\r\n\t\t\tthousandsSeparator,\r\n\t\t\tdecimalSeparator,\r\n\t\t\tdecimalDigits,\r\n\t\t\tpattern,\r\n\t\t\tformatter\r\n\t\t} = this._getOptions(settings, value);\r\n\r\n\t\tif(settings === undefined || (settings instanceof Currency && value.getCurrency().is(settings))) {\r\n\t\t\tvalue = value.getAmountAsBigNumber();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst BN = value.getBigNumberConstructor().clone({\r\n\t\t\t\tFORMAT: {\r\n\t\t\t\t\tdecimalSeparator,\r\n\t\t\t\t\tgroupSeparator: thousandsSeparator,\r\n\t\t\t\t\tgroupSize: 3,\r\n\t\t\t\t\tsecondaryGroupSize: 0,\r\n\t\t\t\t\tfractionGroupSeparator: ' ',\r\n\t\t\t\t\tfractionGroupSize: 0\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tvalue = new BN(value);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsymbol,\r\n\t\t\tcode,\r\n\t\t\tvalue,\r\n\t\t\tdecimalDigits,\r\n\t\t\tpattern,\r\n\t\t\tformatter\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Get formatting/parsing options\r\n\t * @param {object|string|Currency} [settings] - Formatting settings, currency code or currency\r\n\t * @param {Money} [value] - Monetary value to be formatted\r\n\t * @returns {{symbol: string, code: string, thousandsSeparator: string, decimalSeparator: string, decimalDigits: number, pattern: string}} - Formatting/parsing details\r\n\t * @private\r\n\t */\r\n\tstatic _getOptions(settings, value = null) {\r\n\t\tif(settings === undefined && value instanceof Money) {\r\n\t\t\treturn value.getCurrency().getSettings();\r\n\t\t}\r\n\r\n\t\tif(typeof settings === 'string') {\r\n\t\t\tsettings = settings.toUpperCase();\r\n\r\n\t\t\tif(!CurrencyStore.has(settings)) {\r\n\t\t\t\tthrow new InvalidCurrencyError(`No currency with code \"${settings}\" is registered.`);\r\n\t\t\t}\r\n\r\n\t\t\treturn CurrencyStore.get(settings);\r\n\t\t}\r\n\r\n\t\tif(settings instanceof Currency) {\r\n\t\t\treturn settings.getSettings();\r\n\t\t}\r\n\r\n\t\tif(typeof settings !== 'object') {\r\n\t\t\tthrow new InvalidCurrencyError('Invalid currency options provided.');\r\n\t\t}\r\n\r\n\t\tif(typeof settings.code !== 'string' || !settings.code) {\r\n\t\t\tthrow new InvalidCurrencyError('Invalid currency settings; code is required.');\r\n\t\t}\r\n\r\n\t\tif(CurrencyStore.has(settings.code)) {\r\n\t\t\tsettings = {\r\n\t\t\t\t...CurrencyStore.get(settings.code),\r\n\t\t\t\t...settings\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tthousandsSeparator: ',',\r\n\t\t\tdecimalSeparator: '.',\r\n\t\t\tdecimalDigits: 2,\r\n\t\t\tpattern: '%s%ns%v',\r\n\t\t\tformatter: null,\r\n\t\t\tparser: null,\r\n\t\t\tsymbol: settings.code,\r\n\t\t\t...settings,\r\n\t\t};\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/Formatter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "Formatter",
    "memberof": "src/Formatter.js",
    "static": true,
    "longname": "src/Formatter.js~Formatter",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{Formatter}",
    "description": "",
    "examples": [
      "<caption>Format value based on internal currency</caption>\nFormatter.format(value);",
      "<caption>Format value based on currency parameter</caption>\nFormatter.format(value, new Currency('USD'));",
      "<caption>Format value based on currency code</caption>\nFormatter.format(value, 'USD');",
      "<caption>Format value based on custom settings</caption>\nFormatter.format(value, {\n code: 'EUR',\n pattern: '%s%v'\n});"
    ],
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "format",
    "memberof": "src/Formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Formatter.js~Formatter.format",
    "access": "public",
    "description": "Format money based on settings",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Formatted money string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Monetary value to be formatted"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "string",
          "Currency"
        ],
        "spread": false,
        "optional": true,
        "name": "settings",
        "description": "Formatting settings, currency code or currency"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formatted money string"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "parse",
    "memberof": "src/Formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Formatter.js~Formatter.parse",
    "access": "public",
    "description": "Parse money based on settings",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - Parsed \"Money\" value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Monetary value to be parsed"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "string",
          "Currency"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "Parsing settings, currency code or currency"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "Parsed \"Money\" value"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "_replaceAll",
    "memberof": "src/Formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Formatter.js~Formatter._replaceAll",
    "access": "private",
    "description": "Replace all case-insensitive instances of a string in another string",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - final string result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "source string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "search string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": "replacement string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "final string result"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "_getFormattingDetails",
    "memberof": "src/Formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Formatter.js~Formatter._getFormattingDetails",
    "access": "private",
    "description": "Get formatting details",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{symbol: string, code: string, value: BigNumber, decimalDigits: number, pattern: string}} - Formatting details"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Monetary value to be formatted"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "string",
          "Currency"
        ],
        "spread": false,
        "optional": true,
        "name": "settings",
        "description": "Formatting settings, currency code or currency"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{symbol: string, code: string, value: BigNumber, decimalDigits: number, pattern: string}"
      ],
      "spread": false,
      "description": "Formatting details"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "_getOptions",
    "memberof": "src/Formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Formatter.js~Formatter._getOptions",
    "access": "private",
    "description": "Get formatting/parsing options",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{symbol: string, code: string, thousandsSeparator: string, decimalSeparator: string, decimalDigits: number, pattern: string}} - Formatting/parsing details"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "string",
          "Currency"
        ],
        "spread": false,
        "optional": true,
        "name": "settings",
        "description": "Formatting settings, currency code or currency"
      },
      {
        "nullable": null,
        "types": [
          "Money"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Monetary value to be formatted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{symbol: string, code: string, thousandsSeparator: string, decimalSeparator: string, decimalDigits: number, pattern: string}"
      ],
      "spread": false,
      "description": "Formatting/parsing details"
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/index.js",
    "content": "export {default as Money} from './Money';\r\nexport {default as Currency} from './Currency';\r\nexport {default as CurrencyStore} from './CurrencyStore';\r\nexport {default as WealthError} from './errors/WealthError';\r\nexport {default as CurrencyMismatchError} from './errors/CurrencyMismatchError';\r\nexport {default as InvalidCurrencyError} from './errors/InvalidCurrencyError';\r\nexport {default as WrongInputError} from './errors/WrongInputError';\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/Money.js",
    "content": "import BigNumber from 'bignumber.js';\r\nimport isInt from 'validator/lib/isInt';\r\nimport isFloat from 'validator/lib/isFloat';\r\nimport Currency from './Currency';\r\nimport CurrencyMismatchError from './errors/CurrencyMismatchError';\r\nimport WrongInputError from './errors/WrongInputError';\r\nimport Formatter from './Formatter';\r\n\r\n/**\r\n * @example\r\n * let price = new Money('7856', 'USD'); // $78.56\r\n */\r\nexport default class Money {\r\n\r\n\t/**\r\n\t * Rounding modes you can use in your operations.\r\n\t * These map directly to [`BigNumber`'s rounding modes](http://mikemcl.github.io/bignumber.js/#constructor-properties).\r\n\t * @type {object} ROUNDING - rounding modes\r\n\t * @property {number} ROUNDING.UP - Rounds away from zero\r\n\t * @property {number} ROUNDING.DOWN - Rounds towards zero\r\n\t * @property {number} ROUNDING.CEIL - Rounds towards Infinity\r\n\t * @property {number} ROUNDING.FLOOR - Rounds towards -Infinity\r\n\t * @property {number} ROUNDING.HALF_UP - Rounds towards nearest neighbour. If equidistant, rounds away from zero\r\n\t * @property {number} ROUNDING.HALF_DOWN - Rounds towards nearest neighbour. If equidistant, rounds towards zero\r\n\t * @property {number} ROUNDING.HALF_EVEN - Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour\r\n\t * @property {number} ROUNDING.HALF_CEIL - Rounds towards nearest neighbour. If equidistant, rounds towards Infinity\r\n\t * @property {number} ROUNDING.HALF_FLOOR - Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity\r\n\t *\r\n\t * @example\r\n\t * let\r\n\t *      price = new Money('7856', 'USD'), // $78.56\r\n\t *      discountedAndRoundedUp = price.multiply('0.70'), // $55.00\r\n\t *      discountedAndRoundedDown = price.multiply('0.70', Money.ROUNDING.DOWN); // $54.99\r\n\t */\r\n\tstatic ROUNDING = {\r\n\t\tUP: BigNumber.ROUND_UP,\r\n\t\tDOWN: BigNumber.ROUND_DOWN,\r\n\t\tCEIL: BigNumber.ROUND_CEIL,\r\n\t\tFLOOR: BigNumber.ROUND_FLOOR,\r\n\t\tHALF_UP: BigNumber.ROUND_HALF_UP,\r\n\t\tHALF_DOWN: BigNumber.ROUND_HALF_DOWN,\r\n\t\tHALF_EVEN: BigNumber.ROUND_HALF_EVEN,\r\n\t\tHALF_CEIL: BigNumber.ROUND_HALF_CEIL,\r\n\t\tHALF_FLOOR: BigNumber.ROUND_HALF_FLOOR\r\n\t};\r\n\r\n\t/**\r\n\t * @example <caption>Integer as value</caption>\r\n\t * let price = new Money(7856, 'USD'); // $78.56\r\n\t *\r\n\t * @example <caption>String integer as value</caption>\r\n\t * let price = new Money('7856', 'USD'); // $78.56\r\n\t *\r\n\t * @example <caption>String Float as value</caption>\r\n\t * let price = new Money('78.56', 'USD'); // $78.56\r\n\t *\r\n\t * @example <caption>Money instance as value</caption>\r\n\t * let price = new Money(new Money('78.56'), 'USD'); // $78.56 - same as using clone()\r\n\t *\r\n\t * @example <caption>Currency instance as currency</caption>\r\n\t * let price = new Money('7856', new Currency('USD')); // $78.56\r\n\t *\r\n\t * @param {number|string|Money} value - integer, integer string, float string, instance of `Money`\r\n\t * @param {string|Currency} currency - currency code as string, instance of `Currency`\r\n\t */\r\n\tconstructor(value, currency) {\r\n\t\t/**\r\n\t\t * Internal currency\r\n\t\t * @type {Currency} - Internal Currency instance\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._currency = new Currency(currency);\r\n\r\n\t\t/**\r\n\t\t * BigNumber constructor used by this \"Money\" instance\r\n\t\t * @type {class}\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._bigNumberConstructor = this._getBigNumberConstructor();\r\n\r\n\t\t/**\r\n\t\t * Internal value as a big number\r\n\t\t * @type {BigNumber} - Internal BigNumber instance holding the value\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._value = this._preProcessInputValue(value, this._bigNumberConstructor);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs addition\r\n\t * @param {number|string|Money} value - value to be added to the current value; type same as constructor\r\n\t * @returns {Money} - new Money instance after addition\r\n\t */\r\n\tadd(value) {\r\n\t\tvalue = new this.constructor(value, this._currency);\r\n\t\tlet newValue = this._value.plus(value.getAmountAsBigNumber());\r\n\t\treturn new this.constructor(this._convertBigNumberToStringInteger(newValue), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs subtraction\r\n\t * @param {number|string|Money} value - value to be subtracted from the current value; type same as constructor\r\n\t * @returns {Money} - new Money instance after subtraction\r\n\t */\r\n\tsubtract(value) {\r\n\t\tvalue = new this.constructor(value, this._currency);\r\n\t\tlet newValue = this._value.minus(value.getAmountAsBigNumber());\r\n\t\treturn new this.constructor(this._convertBigNumberToStringInteger(newValue), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs multiplication\r\n\t * @param {number|string} value - value to multiply the current value\r\n\t * @param {number} [rounding=ROUNDING.HALF_UP] - rounding mode used in this operation; has to be one of the rounding modes in `Money.ROUNDING`\r\n\t * @returns {Money} - new Money instance after multiplication\r\n\t */\r\n\tmultiply(value, rounding = this.constructor.ROUNDING.HALF_UP) {\r\n\t\tlet newValue = this._value.times(value).decimalPlaces(this._currency.getDecimalDigits(), rounding);\r\n\t\treturn new this.constructor(this._convertBigNumberToStringInteger(newValue), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs division\r\n\t * @param {number|string} value - value to divide the current value by\r\n\t * @param {number} [rounding=ROUNDING.HALF_UP] - rounding mode used in this operation; has to be one of the rounding modes in `Money.ROUNDING`\r\n\t * @returns {Money} - new Money instance after division\r\n\t */\r\n\tdivide(value, rounding = this.constructor.ROUNDING.HALF_UP) {\r\n\t\tlet newValue = this._value.dividedBy(value).decimalPlaces(this._currency.getDecimalDigits(), rounding);\r\n\t\treturn new this.constructor(this._convertBigNumberToStringInteger(newValue), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs an equality check\r\n\t * @param {number|string|Money} value - value to compare to the current value; type same as constructor\r\n\t * @returns {boolean} - true if value is considered equal to the current value\r\n\t */\r\n\tequals(value) {\r\n\t\tvalue = new this.constructor(value, this._currency);\r\n\t\treturn this._value.isEqualTo(value.getAmountAsBigNumber());\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a check if the current value is greater than the parameter\r\n\t * @param {number|string|Money} value - value to compare to the current value; type same as constructor\r\n\t * @returns {boolean} - true if the current value is greater than the parameter\r\n\t */\r\n\tgreaterThan(value) {\r\n\t\tvalue = new this.constructor(value, this._currency);\r\n\t\treturn this._value.isGreaterThan(value.getAmountAsBigNumber());\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a check if the current value is greater than or equal to the parameter\r\n\t * @param {number|string|Money} value - value to compare to the current value; type same as constructor\r\n\t * @returns {boolean} - true if the current value is greater than or equal to the parameter\r\n\t */\r\n\tgreaterThanOrEqualTo(value) {\r\n\t\tvalue = new this.constructor(value, this._currency);\r\n\t\treturn this._value.isGreaterThanOrEqualTo(value.getAmountAsBigNumber());\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a check if the current value is less than the parameter\r\n\t * @param {number|string|Money} value - value to compare to the current value; type same as constructor\r\n\t * @returns {boolean} - true if the current value is less than the parameter\r\n\t */\r\n\tlessThan(value) {\r\n\t\tvalue = new this.constructor(value, this._currency);\r\n\t\treturn this._value.isLessThan(value.getAmountAsBigNumber());\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a check if the current value is less than or equal to the parameter\r\n\t * @param {number|string|Money} value - value to compare to the current value; type same as constructor\r\n\t * @returns {boolean} - true if the current value is less than or equal to the parameter\r\n\t */\r\n\tlessThanOrEqualTo(value) {\r\n\t\tvalue = new this.constructor(value, this._currency);\r\n\t\treturn this._value.isLessThanOrEqualTo(value.getAmountAsBigNumber());\r\n\t}\r\n\r\n\t/**\r\n\t * Return the absolute monetary value of the current value, i.e., remove the minus sign if the value is below zero\r\n\t * @returns {Money} - new Money instance with the absolute value\r\n\t */\r\n\tabsolute() {\r\n\t\tlet newValue = this._value.absoluteValue();\r\n\t\treturn new this.constructor(this._convertBigNumberToStringInteger(newValue), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Return the largest integer less than or equal to the current value\r\n\t * @returns {Money} - new Money instance with the floor value\r\n\t */\r\n\tfloor() {\r\n\t\tlet newValue = this._value.decimalPlaces(0, this.constructor.ROUNDING.FLOOR);\r\n\t\treturn new this.constructor(this._convertBigNumberToStringInteger(newValue), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Return the smallest integer greater than or equal to the current value\r\n\t * @returns {Money} - new Money instance with the ceiling value\r\n\t */\r\n\tceil() {\r\n\t\tlet newValue = this._value.decimalPlaces(0, this.constructor.ROUNDING.CEIL);\r\n\t\treturn new this.constructor(this._convertBigNumberToStringInteger(newValue), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the current currency is the same as that of the parameter\r\n\t * @param {Money} value - value to check currency against the current value; type same as constructor\r\n\t * @returns {boolean} - true if the current value has the same currency as the parameter\r\n\t */\r\n\thasSameCurrency(value) {\r\n\t\tif(!(value instanceof Money)) {\r\n\t\t\tthrow new WrongInputError('The input value must be a \"Money\" instance.');\r\n\t\t}\r\n\t\treturn this._currency.is(value.getCurrency());\r\n\t}\r\n\r\n\t/**\r\n\t * Split the current value by an array of ratios\r\n\t * @param {number[]|string[]} ratios - an array of numbers by which to divide up the current value\r\n\t * @returns {Money[]} - an array of new Money instances, resulting from splitting the current value\r\n\t */\r\n\tallocate(ratios) {\r\n\t\tlet\r\n\t\t\tallocations = [],\r\n\t\t\ttotalValue = this.clone(),\r\n\t\t\tremainder = this.clone(),\r\n\t\t\ttotal = ratios.reduce((total, ratio) => total.plus(ratio), new BigNumber('0'));\r\n\r\n\t\tfor(let ratio of ratios) {\r\n\t\t\tlet share = totalValue\r\n\t\t\t\t.multiply(ratio, this.constructor.ROUNDING.FLOOR)\r\n\t\t\t\t.divide(total, this.constructor.ROUNDING.FLOOR);\r\n\r\n\t\t\tallocations.push(share);\r\n\t\t\tremainder = remainder.subtract(share);\r\n\t\t}\r\n\r\n\t\treturn this._addRemainderToAllocations(allocations, remainder);\r\n\t}\r\n\r\n\t/**\r\n\t * Split the current value by the count\r\n\t * @param {number|string} count - count by which to allocate the current value (must be a 1+ integer)\r\n\t * @returns {Money[]} - an array of new Money instances, resulting from splitting the current value\r\n\t */\r\n\tallocateTo(count) {\r\n\t\tlet\r\n\t\t\tallocations = [],\r\n\t\t\ttotalValue = this.clone(),\r\n\t\t\tbaseShare = totalValue.divide(count, this.constructor.ROUNDING.FLOOR),\r\n\t\t\tremainder = totalValue.subtract(baseShare.multiply(count, this.constructor.ROUNDING.FLOOR));\r\n\r\n\t\tfor(let i = 0; i < count; i++) {\r\n\t\t\tallocations.push(baseShare.clone());\r\n\t\t}\r\n\r\n\t\treturn this._addRemainderToAllocations(allocations, remainder);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new money instance, holding an identical value and currency to the current one\r\n\t * @returns {Money} - the cloned money instance\r\n\t */\r\n\tclone() {\r\n\t\treturn new this.constructor(this.getAmount(), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Format the current value based on the currency\r\n\t * @param {object} [settings] - formatting settings\r\n\t * @returns {string} - formatted money\r\n\t */\r\n\tformat(settings = {}) {\r\n\t\treturn this._currency.format(this, settings);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value as an instance of BigNumber\r\n\t * @returns {BigNumber} - Internal BigNumber representation of the current value\r\n\t */\r\n\tgetAmountAsBigNumber() {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value as a string integer (same as `getAmount`)\r\n\t * @returns {string} - String integer representation of the current value\r\n\t */\r\n\tgetAmountAsStringInteger() {\r\n\t\treturn this.getAmount();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value as a string float\r\n\t * @returns {string} - String float representation of the current value\r\n\t */\r\n\tgetAmountAsStringFloat() {\r\n\t\treturn this._value.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value as a string integer (same as `getAmountAsStringInteger`)\r\n\t * @returns {string} - String integer representation of the current value\r\n\t */\r\n\tgetAmount() {\r\n\t\treturn this._convertBigNumberToStringInteger(this._value);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value as a string integer (same as `getAmount`)\r\n\t * @returns {string} - String integer representation of the current value\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.getAmount();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the internal Currency instance\r\n\t * @returns {Currency} - Internal Currency instance\r\n\t */\r\n\tgetCurrency() {\r\n\t\treturn this._currency;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the smallest unit of the current monetary value, i.e., 0.01 (aka penny) in a USD money\r\n\t * @returns {Money} - new Money instance holding the smallest unit of the current monetary value\r\n\t */\r\n\tgetSmallestUnit() {\r\n\t\treturn new this.constructor(this._getSmallestUnitAsBigNumber().toString(), this._currency);\r\n\t}\r\n\r\n\t/**\r\n\t * Get BigNumber constructor used by this \"Money\" instance\r\n\t * @returns {class}\r\n\t */\r\n\tgetBigNumberConstructor() {\r\n\t\treturn this._bigNumberConstructor;\r\n\t}\r\n\r\n\t/**\r\n\t * Get a simple object representing the current monetary value\r\n\t * @returns {{amount: string, currency: string}} - object with a string integer value and currency code\r\n\t */\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tamount: this.getAmount(),\r\n\t\t\tcurrency: this._currency.toJSON()\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Check that the currency of the passed value matches the current currency. If not, throw an error.\r\n\t * @param {Money} value - The money object which is used for currency check\r\n\t * @private\r\n\t */\r\n\t_checkValueCurrency(value) {\r\n\t\tif(!this.hasSameCurrency(value)) {\r\n\t\t\tthrow new CurrencyMismatchError();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Used by allocation methods to add the remainder to the array of allocations\r\n\t * @param {Money[]} allocations - an array of Money instances already allocated\r\n\t * @param {Money} remainder - a Money instance with the remainder yet to be added to the array of allocations\r\n\t * @returns {Money[]} - the final allocations array of Money instances\r\n\t * @private\r\n\t */\r\n\t_addRemainderToAllocations(allocations, remainder) {\r\n\t\tlet\r\n\t\t\ti = 0,\r\n\t\t\tnoMoney = new this.constructor('0', this._currency),\r\n\t\t\tsmallestUnit = this.getSmallestUnit();\r\n\r\n\t\twhile(!remainder.equals(noMoney)) {\r\n\t\t\tallocations[i] = allocations[i].add(smallestUnit);\r\n\t\t\tremainder = remainder.subtract(smallestUnit);\r\n\r\n\t\t\ti++;\r\n\r\n\t\t\tif(i === allocations.length) {\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn allocations;\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the constructor input value to an internal BigNumber instance\r\n\t * @param {number|string|Money} value - integer, integer string, float string, instance of `Money`\r\n\t * @param {class} BN - BigNumber constructor used by this \"Money\" instance\r\n\t * @returns {BigNumber} - Internal BigNumber instance\r\n\t * @private\r\n\t */\r\n\t_preProcessInputValue(value, BN) {\r\n\t\tif(value instanceof Money) {\r\n\t\t\tthis._checkValueCurrency(value);\r\n\t\t\treturn value.getAmountAsBigNumber();\r\n\t\t}\r\n\r\n\t\tlet divisor = this._getSmallestUnitDivisor();\r\n\r\n\t\tif(divisor.isGreaterThan(1) && (Number.isInteger(value) || (typeof value === 'string' && isInt(value)))) {\r\n\t\t\tvalue = new BN(value);\r\n\r\n\t\t\treturn value\r\n\t\t\t\t.dividedBy(divisor)\r\n\t\t\t\t.decimalPlaces(this._currency.getDecimalDigits());\r\n\t\t}\r\n\r\n\t\tif(typeof value === 'string' && isFloat(value)) {\r\n\t\t\treturn new BN(value);\r\n\t\t}\r\n\r\n\t\tthrow new WrongInputError('The input value must be either an integer, an integer-like string, a float-like string or a \"Money\" instance.');\r\n\t}\r\n\r\n\t/**\r\n\t * Get the smallest unit divisor for the current value's currency, i.e., 10 to the power of the currency's decimal digits.\r\n\t * It is used for converting an integer value to a float value (or vice versa).\r\n\t * @returns {BigNumber} - Smallest unit divisor\r\n\t * @private\r\n\t */\r\n\t_getSmallestUnitDivisor() {\r\n\t\tlet\tdecimalDigits = this._currency.getDecimalDigits();\r\n\t\treturn (new BigNumber('10')).exponentiatedBy(decimalDigits);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the smallest unit of the currency as a big number\r\n\t * @returns {BigNumber} - Smallest unit of the currency\r\n\t * @private\r\n\t */\r\n\t_getSmallestUnitAsBigNumber() {\r\n\t\treturn (new BigNumber('1')).dividedBy(this._getSmallestUnitDivisor());\r\n\t}\r\n\r\n\t/**\r\n\t * Convert a BigNumber to a string integer\r\n\t * @param {BigNumber} value - value to be converted\r\n\t * @returns {string} - String integer value of the BigNumber value\r\n\t * @private\r\n\t */\r\n\t_convertBigNumberToStringInteger(value) {\r\n\t\treturn value.times(this._getSmallestUnitDivisor()).toString();\r\n\t}\r\n\r\n\t/**\r\n\t * The values below are the default but we need a new constructor in case the default is changed by external code.\r\n\t * @returns {object} - BigInteger constructor with 20 decimal places and default rounding half up\r\n\t * @private\r\n\t */\r\n\t_getBigNumberConstructor() {\r\n\t\treturn BigNumber.clone({\r\n\t\t\tDECIMAL_PLACES: 20,\r\n\t\t\tROUNDING_MODE: this.constructor.ROUNDING.HALF_UP,\r\n\t\t\tFORMAT: {\r\n\t\t\t\tdecimalSeparator: this._currency.getDecimalSeparator(),\r\n\t\t\t\tgroupSeparator: this._currency.getThousandsSeparator(),\r\n\t\t\t\tgroupSize: 3,\r\n\t\t\t\tsecondaryGroupSize: 0,\r\n\t\t\t\tfractionGroupSeparator: ' ',\r\n\t\t\t\tfractionGroupSize: 0\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Parse a formatted money string into an instance of Money\r\n\t * @param {string} value - the formatted money string\r\n\t * @param {string|object|Currency} settings - the formatting settings\r\n\t * @returns {Money} - a Money instance holding the parsed value and currency\r\n\t */\r\n\tstatic parse(value, settings) {\r\n\t\treturn Formatter.parse(value, settings);\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/amirm/projects/personal/code/wealth/src/Money.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "class",
    "name": "Money",
    "memberof": "src/Money.js",
    "static": true,
    "longname": "src/Money.js~Money",
    "access": "public",
    "export": true,
    "importPath": "wealth",
    "importStyle": "{Money}",
    "description": "",
    "examples": [
      "let price = new Money('7856', 'USD'); // $78.56"
    ],
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "ROUNDING",
    "memberof": "src/Money.js~Money",
    "static": true,
    "longname": "src/Money.js~Money.ROUNDING",
    "access": "public",
    "description": "Rounding modes you can use in your operations.\nThese map directly to [`BigNumber`'s rounding modes](http://mikemcl.github.io/bignumber.js/#constructor-properties).",
    "examples": [
      "let\n     price = new Money('7856', 'USD'), // $78.56\n     discountedAndRoundedUp = price.multiply('0.70'), // $55.00\n     discountedAndRoundedDown = price.multiply('0.70', Money.ROUNDING.DOWN); // $54.99"
    ],
    "lineNumber": 35,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.UP",
        "description": "Rounds away from zero"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.DOWN",
        "description": "Rounds towards zero"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.CEIL",
        "description": "Rounds towards Infinity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.FLOOR",
        "description": "Rounds towards -Infinity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.HALF_UP",
        "description": "Rounds towards nearest neighbour. If equidistant, rounds away from zero"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.HALF_DOWN",
        "description": "Rounds towards nearest neighbour. If equidistant, rounds towards zero"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.HALF_EVEN",
        "description": "Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.HALF_CEIL",
        "description": "Rounds towards nearest neighbour. If equidistant, rounds towards Infinity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ROUNDING.HALF_FLOOR",
        "description": "Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#constructor",
    "access": "public",
    "description": "",
    "examples": [
      "<caption>Integer as value</caption>\nlet price = new Money(7856, 'USD'); // $78.56",
      "<caption>String integer as value</caption>\nlet price = new Money('7856', 'USD'); // $78.56",
      "<caption>String Float as value</caption>\nlet price = new Money('78.56', 'USD'); // $78.56",
      "<caption>Money instance as value</caption>\nlet price = new Money(new Money('78.56'), 'USD'); // $78.56 - same as using clone()",
      "<caption>Currency instance as currency</caption>\nlet price = new Money('7856', new Currency('USD')); // $78.56"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "integer, integer string, float string, instance of `Money`"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Currency"
        ],
        "spread": false,
        "optional": false,
        "name": "currency",
        "description": "currency code as string, instance of `Currency`"
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "_currency",
    "memberof": "src/Money.js~Money",
    "static": false,
    "longname": "src/Money.js~Money#_currency",
    "access": "private",
    "description": "Internal currency",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Currency"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "_bigNumberConstructor",
    "memberof": "src/Money.js~Money",
    "static": false,
    "longname": "src/Money.js~Money#_bigNumberConstructor",
    "access": "private",
    "description": "BigNumber constructor used by this \"Money\" instance",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_value",
    "memberof": "src/Money.js~Money",
    "static": false,
    "longname": "src/Money.js~Money#_value",
    "access": "private",
    "description": "Internal value as a big number",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "BigNumber"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "add",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#add",
    "access": "public",
    "description": "Performs addition",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance after addition"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to be added to the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance after addition"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#subtract",
    "access": "public",
    "description": "Performs subtraction",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance after subtraction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to be subtracted from the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance after subtraction"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "multiply",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#multiply",
    "access": "public",
    "description": "Performs multiplication",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance after multiplication"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to multiply the current value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "ROUNDING.HALF_UP",
        "defaultRaw": "ROUNDING.HALF_UP",
        "name": "rounding",
        "description": "rounding mode used in this operation; has to be one of the rounding modes in `Money.ROUNDING`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance after multiplication"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "divide",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#divide",
    "access": "public",
    "description": "Performs division",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance after division"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to divide the current value by"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "ROUNDING.HALF_UP",
        "defaultRaw": "ROUNDING.HALF_UP",
        "name": "rounding",
        "description": "rounding mode used in this operation; has to be one of the rounding modes in `Money.ROUNDING`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance after division"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "equals",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#equals",
    "access": "public",
    "description": "Performs an equality check",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true if value is considered equal to the current value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to compare to the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if value is considered equal to the current value"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "greaterThan",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#greaterThan",
    "access": "public",
    "description": "Performs a check if the current value is greater than the parameter",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true if the current value is greater than the parameter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to compare to the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the current value is greater than the parameter"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "greaterThanOrEqualTo",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#greaterThanOrEqualTo",
    "access": "public",
    "description": "Performs a check if the current value is greater than or equal to the parameter",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true if the current value is greater than or equal to the parameter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to compare to the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the current value is greater than or equal to the parameter"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "lessThan",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#lessThan",
    "access": "public",
    "description": "Performs a check if the current value is less than the parameter",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true if the current value is less than the parameter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to compare to the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the current value is less than the parameter"
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "lessThanOrEqualTo",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#lessThanOrEqualTo",
    "access": "public",
    "description": "Performs a check if the current value is less than or equal to the parameter",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true if the current value is less than or equal to the parameter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to compare to the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the current value is less than or equal to the parameter"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "absolute",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#absolute",
    "access": "public",
    "description": "Return the absolute monetary value of the current value, i.e., remove the minus sign if the value is below zero",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance with the absolute value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance with the absolute value"
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "floor",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#floor",
    "access": "public",
    "description": "Return the largest integer less than or equal to the current value",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance with the floor value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance with the floor value"
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "ceil",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#ceil",
    "access": "public",
    "description": "Return the smallest integer greater than or equal to the current value",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance with the ceiling value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance with the ceiling value"
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "hasSameCurrency",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#hasSameCurrency",
    "access": "public",
    "description": "Checks if the current currency is the same as that of the parameter",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true if the current value has the same currency as the parameter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to check currency against the current value; type same as constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the current value has the same currency as the parameter"
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "allocate",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#allocate",
    "access": "public",
    "description": "Split the current value by an array of ratios",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money[]} - an array of new Money instances, resulting from splitting the current value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "ratios",
        "description": "an array of numbers by which to divide up the current value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money[]"
      ],
      "spread": false,
      "description": "an array of new Money instances, resulting from splitting the current value"
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "allocateTo",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#allocateTo",
    "access": "public",
    "description": "Split the current value by the count",
    "lineNumber": 251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money[]} - an array of new Money instances, resulting from splitting the current value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "count by which to allocate the current value (must be a 1+ integer)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money[]"
      ],
      "spread": false,
      "description": "an array of new Money instances, resulting from splitting the current value"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#clone",
    "access": "public",
    "description": "Create a new money instance, holding an identical value and currency to the current one",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - the cloned money instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "the cloned money instance"
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "format",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#format",
    "access": "public",
    "description": "Format the current value based on the currency",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - formatted money"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "settings",
        "description": "formatting settings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "formatted money"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getAmountAsBigNumber",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#getAmountAsBigNumber",
    "access": "public",
    "description": "Get the current value as an instance of BigNumber",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigNumber} - Internal BigNumber representation of the current value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigNumber"
      ],
      "spread": false,
      "description": "Internal BigNumber representation of the current value"
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "getAmountAsStringInteger",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#getAmountAsStringInteger",
    "access": "public",
    "description": "Get the current value as a string integer (same as `getAmount`)",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - String integer representation of the current value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String integer representation of the current value"
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "getAmountAsStringFloat",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#getAmountAsStringFloat",
    "access": "public",
    "description": "Get the current value as a string float",
    "lineNumber": 302,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - String float representation of the current value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String float representation of the current value"
    },
    "params": []
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getAmount",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#getAmount",
    "access": "public",
    "description": "Get the current value as a string integer (same as `getAmountAsStringInteger`)",
    "lineNumber": 310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - String integer representation of the current value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String integer representation of the current value"
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "toString",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#toString",
    "access": "public",
    "description": "Get the current value as a string integer (same as `getAmount`)",
    "lineNumber": 318,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - String integer representation of the current value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String integer representation of the current value"
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getCurrency",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#getCurrency",
    "access": "public",
    "description": "Get the internal Currency instance",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Currency} - Internal Currency instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Currency"
      ],
      "spread": false,
      "description": "Internal Currency instance"
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "getSmallestUnit",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#getSmallestUnit",
    "access": "public",
    "description": "Get the smallest unit of the current monetary value, i.e., 0.01 (aka penny) in a USD money",
    "lineNumber": 334,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - new Money instance holding the smallest unit of the current monetary value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "new Money instance holding the smallest unit of the current monetary value"
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "getBigNumberConstructor",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#getBigNumberConstructor",
    "access": "public",
    "description": "Get BigNumber constructor used by this \"Money\" instance",
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{class}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "class"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#toJSON",
    "access": "public",
    "description": "Get a simple object representing the current monetary value",
    "lineNumber": 350,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{amount: string, currency: string}} - object with a string integer value and currency code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{amount: string, currency: string}"
      ],
      "spread": false,
      "description": "object with a string integer value and currency code"
    },
    "params": []
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "_checkValueCurrency",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#_checkValueCurrency",
    "access": "private",
    "description": "Check that the currency of the passed value matches the current currency. If not, throw an error.",
    "lineNumber": 362,
    "params": [
      {
        "nullable": null,
        "types": [
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The money object which is used for currency check"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "_addRemainderToAllocations",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#_addRemainderToAllocations",
    "access": "private",
    "description": "Used by allocation methods to add the remainder to the array of allocations",
    "lineNumber": 375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money[]} - the final allocations array of Money instances"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Money[]"
        ],
        "spread": false,
        "optional": false,
        "name": "allocations",
        "description": "an array of Money instances already allocated"
      },
      {
        "nullable": null,
        "types": [
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "remainder",
        "description": "a Money instance with the remainder yet to be added to the array of allocations"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money[]"
      ],
      "spread": false,
      "description": "the final allocations array of Money instances"
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "_preProcessInputValue",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#_preProcessInputValue",
    "access": "private",
    "description": "Convert the constructor input value to an internal BigNumber instance",
    "lineNumber": 402,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigNumber} - Internal BigNumber instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Money"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "integer, integer string, float string, instance of `Money`"
      },
      {
        "nullable": null,
        "types": [
          "class"
        ],
        "spread": false,
        "optional": false,
        "name": "BN",
        "description": "BigNumber constructor used by this \"Money\" instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigNumber"
      ],
      "spread": false,
      "description": "Internal BigNumber instance"
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "_getSmallestUnitDivisor",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#_getSmallestUnitDivisor",
    "access": "private",
    "description": "Get the smallest unit divisor for the current value's currency, i.e., 10 to the power of the currency's decimal digits.\nIt is used for converting an integer value to a float value (or vice versa).",
    "lineNumber": 431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigNumber} - Smallest unit divisor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigNumber"
      ],
      "spread": false,
      "description": "Smallest unit divisor"
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "_getSmallestUnitAsBigNumber",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#_getSmallestUnitAsBigNumber",
    "access": "private",
    "description": "Get the smallest unit of the currency as a big number",
    "lineNumber": 441,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigNumber} - Smallest unit of the currency"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigNumber"
      ],
      "spread": false,
      "description": "Smallest unit of the currency"
    },
    "params": []
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "_convertBigNumberToStringInteger",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#_convertBigNumberToStringInteger",
    "access": "private",
    "description": "Convert a BigNumber to a string integer",
    "lineNumber": 451,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - String integer value of the BigNumber value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to be converted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String integer value of the BigNumber value"
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "_getBigNumberConstructor",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Money.js~Money#_getBigNumberConstructor",
    "access": "private",
    "description": "The values below are the default but we need a new constructor in case the default is changed by external code.",
    "lineNumber": 460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - BigInteger constructor with 20 decimal places and default rounding half up"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "BigInteger constructor with 20 decimal places and default rounding half up"
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "parse",
    "memberof": "src/Money.js~Money",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Money.js~Money.parse",
    "access": "public",
    "description": "Parse a formatted money string into an instance of Money",
    "lineNumber": 481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Money} - a Money instance holding the parsed value and currency"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the formatted money string"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "object",
          "Currency"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "the formatting settings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Money"
      ],
      "spread": false,
      "description": "a Money instance holding the parsed value and currency"
    }
  },
  {
    "kind": "index",
    "content": "# Wealth\n\nWealth is a JavaScript library for handling money calculation, allocation, formatting, serialization, and currency handling.\n\nThere are many libraries out there that handle money or currency, but there's not one that offers a complete feature set.\nThis library provides a uniform interface for various money-related operations.\n\nUnder the hood, it uses [bignumber.js](https://github.com/MikeMcl/bignumber.js/) for calculations.\n\n## Installation\n`npm install wealth`\n\nor\n\n`yarn add wealth`\n\n## API Reference\nSee the [API Reference](http://amirmohsen.github.io/wealth) for a better understanding of the available features.\n\n## Immutability\nAll `Money` and `Currency` instances are immutable and each of the operations return a new instance.\nThis makes `Wealth` perfect for react/redux applications.\n\n## Examples\n\n- [Money Calculation and Manipulation](#money-calculation-and-manipulation)\n- [Money Comparison](#money-comparison)\n- [Money Allocation](#money-allocation)\n- [Currency](#currency)\n- [Formatting and Parsing](#formatting-and-parsing)\n- [Serialization](#serialization)\n- [Error Handling](#error-handling)\n\n### Money Calculation and Manipulation\n```js\nimport {Money} from 'wealth';\n\nlet\n\tprice = new Money('8078', 'USD'), // $80.78\n\tdiscountedPercentage = 10, // 10% discount\n\tdiscountedPrice = price.subtract(price.multiply(10).divide(100)), // $72.70\n\tshipping = new Money('1550', 'USD'), // $15.50\n\ttotal = price.add(shipping); // $88.20\n```\n\n### Money Comparison\n```js\nimport {Money} from 'wealth';\n\nlet\n\toverdraft = new Money('100000', 'GBP'), // $1000.00\n\tdebt = new Money('900', 'GBP'), // $9.00\n\tcanBorrowMore = debt.lessThan(overdraft); // true\n```\n\n### Money Allocation\n```js\nimport {Money} from 'wealth';\n\nlet\n\tinheritance = new Money('5000000', 'EUR'),\n\tratios = [63, 22, 15], // ratios\n\tinheritedShares = inheritance.allocate(ratios);\n\nlet\n\texpenses = new Money('79595', 'EUR'),\n\texpenseShares = expenses.allocateTo(10); // Equal (or nearly equal) shares of expenses\n```\n\n### Currency\n```js\nimport {CurrencyStore, Currency} from 'wealth';\n\n/**\n* All ISO currencies are already registered in the `CurrencyStore`.\n* You can find a currency by its code:\n**/\nlet gbp = new Currency('GBP'); // Create a new currency instance\nlet gbpSettings = gbp.getSettings();\n// or you can get the settings directly from the `CurrencyStore`\ngbpSettings = CurrencyStore.get('GBP'); // alias: Currency.getSettings()\n\n/**\n* You may wish to create a currency without registering it in the store for one-off use.\n*/\n\nlet bitcoin = new Currency({\n\tcode: 'XBT',\n\tsymbol: 'Ƀ'\n});\n\n/**\n* Or you can register a new currency for re-use\n**/\n\nCurrencyStore.set('ETH', {\n\tsymbol: 'Ξ'\n});\n\n// Getting all registered currencies\nlet allCurrencies = CurrencyStore.getAll(); // alias: Currency.getAllSettings()\n``` \n\n### Formatting and Parsing\n```js\nimport {Money, Formatter} from 'wealth';\n\nlet money = new Money('500000', 'EUR');\nmoney.format(); // 5 000,00 €\nmoney.format({\n\tpattern: '%ns%s%v',\n\tthousandsSeparator: ',',\n\tdecimalSeparator: '.'\n}); // €5,000.00\n\nmoney.format({\n\tformatter: () => {} // custom formatter\n});\n\n// Using money.format() is the same as\nFormatter.format(money);\n\n// Using money.format(settings) is the same as\nFormatter.format(money, settings);\n```\n\n```js\nimport {Money, Formatter} from 'wealth';\n\nlet money = Money.parse('5 000,00 €', 'EUR'); // alias for Formatter.parse\n\nmoney = Money.parse('€5,000.00', {\n\tcode: 'EUR',\n\tthousandsSeparator: ',',\n\tdecimalSeparator: '.'\n});\n\n\nmoney = Money.parse('€5,000.00', {\n\tparser: () => {} // custom parser\n});\n```\n\n### Serialization\n\n```js\nimport {Money} from 'wealth';\n\nlet money = new Money('100', 'USD');\nmoney.toJSON(); // {amount: '100', currency: 'USD'}\nJSON.stringify(money); // {amount: '100', currency: 'USD'}\n```\n\n### Error Handling\n```js\nimport {\n\tWealthError,\n\tCurrencyMismatchError,\n\tInvalidCurrencyError,\n\tWrongInputError\n} from 'wealth';\n\ntry {\n\t// operations\n}\ncatch(e) {\n\tif(e instanceof CurrencyMismatchError) {\n\t\t// Thrown when the two sides of the operation use different currencies\n\t}\n\telse if(e instanceof InvalidCurrencyError) {\n\t\t// Thrown when invalid or missing currency code provided\n\t}\n\telse if(e instanceof WrongInputError) {\n\t\t// Thrown when bad input is provided to various methods\n\t}\n\t\n\tif(e instanceof WealthError) {\n\t\t// All custom errors produced by Wealth inherit `WealthError`\n\t}\n\telse {\n\t\t// All other errors\n\t}\n}\n```\n\n",
    "longname": "C:\\Users\\amirm\\projects\\personal\\code\\wealth\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"wealth\",\r\n  \"version\": \"0.1.0\",\r\n  \"repository\": \"https://github.com/amirmohsen/wealth\",\r\n  \"description\": \"A full-featured money library\",\r\n  \"scripts\": {\r\n    \"build\": \"rollup -c -m\",\r\n    \"dev\": \"rollup -c -m -w\",\r\n    \"pretest\": \"npm run build\",\r\n    \"prepublishOnly\": \"npm run build\",\r\n    \"test\": \"jest\",\r\n    \"docs\": \"esdoc\"\r\n  },\r\n  \"files\": [\r\n    \"lib\"\r\n  ],\r\n  \"main\": \"lib/wealth.cjs.js\",\r\n  \"module\": \"lib/wealth.esm.js\",\r\n  \"browser\": \"lib/wealth.umd.js\",\r\n  \"keywords\": [\r\n    \"flexverse\",\r\n    \"money\",\r\n    \"currency\",\r\n    \"calculation\",\r\n    \"formatting\",\r\n    \"allocation\",\r\n    \"serializable\"\r\n  ],\r\n  \"author\": {\r\n    \"name\": \"Amir Abdolrazaghi\",\r\n    \"email\": \"amir@flexverse.tech\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/amirmohsen/wealth/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/amirmohsen/wealth#readme\",\r\n  \"babel\": {\r\n    \"presets\": [\r\n      [\r\n        \"env\"\r\n      ]\r\n    ],\r\n    \"plugins\": [\r\n      \"syntax-decorators\",\r\n      \"transform-decorators-legacy\",\r\n      \"transform-class-properties\",\r\n      \"transform-object-rest-spread\"\r\n    ]\r\n  },\r\n  \"dependencies\": {\r\n    \"bignumber.js\": \"6\",\r\n    \"es6-error\": \"^4.1.1\",\r\n    \"validator\": \"^9.1.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"babel-jest\": \"^22\",\r\n    \"babel-plugin-external-helpers\": \"^6.22.0\",\r\n    \"babel-plugin-syntax-decorators\": \"^6.13.0\",\r\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\r\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\r\n    \"babel-plugin-transform-object-rest-spread\": \"^6.23.0\",\r\n    \"babel-preset-env\": \"^1.3.3\",\r\n    \"esdoc\": \"^1.0.4\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-named-import-plugin\": \"0.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"jest\": \"^22\",\r\n    \"rollup\": \"^0.55\",\r\n    \"rollup-plugin-babel\": \"^3.0.2\",\r\n    \"rollup-plugin-commonjs\": \"^8.0.2\",\r\n    \"rollup-plugin-json\": \"^2.3.0\",\r\n    \"rollup-plugin-node-resolve\": \"^3.0.0\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\amirm\\projects\\personal\\code\\wealth\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]