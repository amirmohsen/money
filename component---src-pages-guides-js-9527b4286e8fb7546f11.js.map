{"version":3,"sources":["webpack:///./src/pages/guides.js","webpack:///./src/components/Grid/index.js","webpack:///./src/components/ConfigurableCodeBlock/CodeBlockOptions/index.js","webpack:///./src/components/ConfigurableCodeBlock/configurator/index.js","webpack:///./src/components/ConfigurableCodeBlock/index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_5__","_components_ConfigurableCodeBlock__WEBPACK_IMPORTED_MODULE_6__","_components_DarkWrapper__WEBPACK_IMPORTED_MODULE_7__","Header","withTheme","styled","h1","withConfig","displayName","componentId","_ref","theme","palette","secondary","contrastText","Topic","_ref2","children","a","createElement","GuidesPage","title","GridWrapper","div","GridContainer","react__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_AppBar__WEBPACK_IMPORTED_MODULE_6___default","position","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_7___default","container","spacing","GridItem","props","_objectWithoutPropertiesLoose","Object","assign","item","_material_ui_core_Card__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_core_CardContent__WEBPACK_IMPORTED_MODULE_9___default","FormControlWrapper","OriginalGrid","breakpoints","down","FormControl","InnerFormControl","ConfigurationOption","name","label","value","onChange","options","react_default","xs","sm","CodeBlockOptions_FormControl","InputLabel_default","htmlFor","Select_default","inputProps","id","map","_ref3","MenuItem_default","key","CodeBlockOptions","_ref4","importType","usageParadigm","importModularity","Grid_default","CodeBlockOptions_ConfigurationOption","acorn","require","walk","escodegen","methods","configurator","_ref5","source","parsed","parse","sourceType","ancestor","ImportDeclaration","node","ancestors","nodeIndex","body","indexOf","specifiers","length","type","importedNames","specifier","imported","_ancestors$0$body","imports","importedName","expression","callee","arguments","splice","apply","concat","_toConsumableArray","newSource","replace","shorthand","kind","declarations","properties","init","convertToCJS","CallExpression","includes","shift","object","property","convertToOO","handleImports","generate","format","indent","style","quotes","ConfigurableCodeBlock","_useContext","useContext","context","Grid","ConfigurableCodeBlock_CodeBlockOptions","_ref2$target","target","prism","language","tomorrow","showLineNumbers"],"mappings":"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","file":"component---src-pages-guides-js-9527b4286e8fb7546f11.js","sourcesContent":["import React from 'react'\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport 'typeface-roboto'\nimport styled from 'styled-components'\nimport { withTheme } from '@material-ui/core/styles'\nimport ConfigurableCodeBlock from '../components/ConfigurableCodeBlock'\nimport DarkWrapper from '../components/DarkWrapper'\n\nconst Header = withTheme()(styled.h1`\n  font-size: 1.7rem;\n  padding: 30px 12px 20px 12px;\n  margin: 0;\n  font-weight: 500;\n  color: ${({ theme }) => theme.palette.secondary.contrastText};\n`)\n\nconst Topic = ({ children }) => (\n  <DarkWrapper>\n    <Header>{children}</Header>\n  </DarkWrapper>\n)\n\nconst GuidesPage = () => (\n  <Layout>\n    <SEO title=\"Guides\" />\n    <Topic>Money Calculation and Manipulation</Topic>\n    <ConfigurableCodeBlock>\n      {`\n        import { Money } from 'wealth';\n        import { add, subtract, multiply, divide } from 'wealth/fn';\n\n        const price = Money.init('80.78', 'USD'); // $80.78\n        const discountPercentage = 10; // 10% discount\n        let discount = multiply(price, discountPercentage);\n        discount = divide(discount, 100);\n        const discountedPrice = subtract(price, discount); // $72.70\n        const shipping = Money.init('15.50', 'USD'); // $15.50\n        const total = add(price, shipping); // $88.20\n      `}\n    </ConfigurableCodeBlock>\n    <Topic>Money Comparison</Topic>\n    <ConfigurableCodeBlock>\n      {`\n        import { Money } from 'wealth';\n        import { lessThan } from 'wealth/fn';\n\n        const overdraft = Money.init('1000.00', 'GBP'); // $1000.00\n        const debt = Money.init('9.00', 'GBP'); // $9.00\n        const canBorrowMore = lessThan(debt, overdraft); // true\n      `}\n    </ConfigurableCodeBlock>\n    <Topic>Money Allocation</Topic>\n    <ConfigurableCodeBlock>\n      {`\n        import { Money } from 'wealth';\n        import { allocate, allocateTo } from 'wealth/fn';\n\n        // Allocation by ratios\n        const inheritance = Money.init('5000.00', 'EUR');\n        const ratios = [63, 22, 15]; // ratios\n        const inheritedShares = allocate(inheritance, ratios);\n        // Equal Allocation\n        const expenses = Money.init('795.95', 'EUR');\n        const expenseShares = allocateTo(expenses, 10); // Equal (or nearly equal) shares of expenses\n      `}\n    </ConfigurableCodeBlock>\n    <Topic>Currency</Topic>\n    <ConfigurableCodeBlock>\n      {`\n        import { Money, Currency } from 'wealth';\n        import {\n          registerCurrency\n        } from 'wealth/store';\n        import {\n          GBP\n        } from 'wealth/iso';\n\n        registerCurrency(GBP);\n\n        registerCurrency({\n          code: 'XBT',\n          symbol: 'Ƀ'\n        });\n\n        const gbpCurrencyInstance = Currency.init('GBP');\n        const moneyA = Money.init('900.00', gbpCurrencyInstance);\n        const moneyB = Money.init('900.00', 'GBP');\n        const moneyC = Money.init('900.00', 'XBT');\n      `}\n    </ConfigurableCodeBlock>\n    <Topic>Formatting and Parsing</Topic>\n    <ConfigurableCodeBlock>\n      {`\n        import { Money } from 'wealth';\n        import { registerCurrency } from 'wealth/store';\n        import { USD } from 'wealth/iso';\n        import { format } from 'wealth/fn';\n\n        registerCurrency(USD);\n\n        const money = Money.init('5000.00', 'USD');\n        format(money) === '$5,000.00'\n        format(money, {\n          pattern: '%ns%s%v',\n          thousandsSeparator: ',',\n          decimalSeparator: '.'\n        }) === '5 000,00 $'\n      `}\n    </ConfigurableCodeBlock>\n    <Topic>Serialization</Topic>\n    <ConfigurableCodeBlock>\n      {`\n        import { Money } from 'wealth';\n\n        const money = Money.init('1.00', 'USD');\n        JSON.stringify(money) === '{ \"amount\": \"1.00\", \"currency\": \"USD\" }'\n      `}\n    </ConfigurableCodeBlock>\n    <Topic>Error Handling</Topic>\n    <ConfigurableCodeBlock>\n      {`\n        import {\n          WealthError,\n          CurrencyMismatchError,\n          InvalidCurrencyError,\n          WrongInputError\n        } from 'wealth/errors';\n\n        try {\n          console.log('Some Wealth operations');\n        }\n        catch(e) {\n          if(e instanceof CurrencyMismatchError) {\n            console.log('Thrown when the two sides of the operation use different currencies');\n          }\n          else if(e instanceof InvalidCurrencyError) {\n            console.log('Thrown when invalid or missing currency code provided');\n          }\n          else if(e instanceof WrongInputError) {\n            console.log('Thrown when bad input is provided to various methods');\n          }\n\n          if(e instanceof WealthError) {\n            console.log('All custom errors produced by Wealth inherit \"WealthError\"');\n          }\n          else {\n            console.log('All other errors');\n          }\n        }\n      `}\n    </ConfigurableCodeBlock>\n  </Layout>\n)\n\nexport default GuidesPage\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport styled from 'styled-components';\n\nconst GridWrapper = styled.div`\n  padding: 12px;\n`;\n\nexport const GridContainer = ({ children }) => (\n  <AppBar position=\"static\">\n    <GridWrapper>\n      <Grid container spacing={24}>\n        {children}\n      </Grid>\n    </GridWrapper>\n  </AppBar>\n);\n\nexport const GridItem = ({ children, ...props }) => (\n  <Grid item {...props}>\n      <Card>\n        <CardContent>\n          {children}\n        </CardContent>\n      </Card>\n  </Grid>\n);\n","import React from 'react';\nimport InnerFormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport OriginalGrid from '@material-ui/core/Grid';\nimport { withTheme } from '@material-ui/core/styles';\nimport styled from 'styled-components';\n\nconst FormControlWrapper = withTheme()(styled(OriginalGrid)`\n  && {\n    display: flex;\n    ${({ theme }) => `\n        ${theme.breakpoints.down('xs')} {\n          margin-bottom: 30px;\n\n          &:last-child {\n            margin-bottom: 0;\n          }\n        }\n    `}\n  }\n`);\n\nconst FormControl = styled(InnerFormControl)`\n  && {\n    min-width: 150px;\n    margin: auto;\n  }\n`;\n\nconst ConfigurationOption = ({ name, label, value, onChange, options }) => (\n  <FormControlWrapper item xs={12} sm={4}>\n    <FormControl>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        value={value}\n        onChange={onChange}\n        inputProps={{\n          name,\n          id: name,\n        }}\n      >\n        {options.map(({ value, label }) => (\n          <MenuItem value={value} key={value}>\n            {label}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  </FormControlWrapper>\n);\n\nconst CodeBlockOptions = ({ importType, usageParadigm, importModularity, onChange }) => (\n  <OriginalGrid container>\n    <ConfigurationOption\n      label=\"Import type\"\n      name=\"importType\"\n      value={importType}\n      onChange={onChange}\n      options={[\n        {\n          value: 'esm',\n          label: 'ES Modules'\n        },\n        {\n          value: 'cjs',\n          label: 'Common JS'\n        }\n      ]}\n    />\n    <ConfigurationOption\n      label=\"Usage paradigm\"\n      name=\"usageParadigm\"\n      value={usageParadigm}\n      onChange={onChange}\n      options={[\n        {\n          value: 'fp',\n          label: 'Functional'\n        },\n        {\n          value: 'oo',\n          label: 'Object-oriented'\n        }\n      ]}\n    />\n    {\n      usageParadigm === 'oo' && (\n        <ConfigurationOption\n          label=\"Import modularity\"\n          name=\"importModularity\"\n          value={importModularity}\n          onChange={onChange}\n          options={[\n            {\n              value: 'full',\n              label: 'Full import'\n            },\n            {\n              value: 'modular',\n              label: 'Module augmentation'\n            }\n          ]}\n        />\n      )\n    }\n  </OriginalGrid>\n);\n\nexport default CodeBlockOptions;\n","const acorn = require('acorn')\nconst walk = require('acorn-walk')\nconst escodegen = require('escodegen')\n// const splitAt = require('split-at');\n\nconst generateESM = ({ importedNames }) => {\n  return importedNames.map(importedName => ({\n    type: 'ImportDeclaration',\n    specifiers: [],\n    source: {\n      type: 'Literal',\n      value: `wealth/methods/${importedName}`,\n    },\n  }))\n}\n\nconst generateCJS = ({ importedNames }) => {\n  return importedNames.map(importedName => ({\n    type: 'ExpressionStatement',\n    expression: {\n      type: 'CallExpression',\n      callee: {\n        type: 'Identifier',\n        name: 'require',\n      },\n      arguments: [\n        {\n          type: 'Literal',\n          value: `wealth/node/methods/${importedName}`,\n        },\n      ],\n    },\n  }))\n}\n\nconst convertToCJS = ({ importedNames, body, nodeIndex, source }) => {\n  const newSource = source.replace('wealth', 'wealth/node')\n\n  const imports = importedNames.map(importedName => ({\n    type: 'Property',\n    shorthand: true,\n    key: {\n      type: 'Identifier',\n      name: importedName,\n    },\n    kind: 'init',\n    value: {\n      type: 'Identifier',\n      name: importedName,\n    },\n  }))\n\n  body[nodeIndex] = {\n    type: 'VariableDeclaration',\n    declarations: [\n      {\n        type: 'VariableDeclarator',\n        id: {\n          type: 'ObjectPattern',\n          properties: imports,\n        },\n        init: {\n          type: 'CallExpression',\n          callee: {\n            type: 'Identifier',\n            name: 'require',\n          },\n          arguments: [\n            {\n              type: 'Literal',\n              value: newSource,\n            },\n          ],\n        },\n      },\n    ],\n    kind: 'const',\n  }\n}\n\nconst methods = [\n  'add',\n  'subtract',\n  'multiply',\n  'divide',\n  'absolute',\n  'ceil',\n  'floor',\n  'equals',\n  'greaterThan',\n  'greaterThanOrEqualTo',\n  'lessThan',\n  'lessThanOrEqualTo',\n  'allocate',\n  'allocateBy',\n  'format',\n  'parse',\n]\n\nconst convertToOO = node => {\n  let name = 'Money'\n\n  if (node.callee.name !== 'parse') {\n    ;({ name } = node.arguments.shift())\n  }\n\n  node.callee = {\n    type: 'MemberExpression',\n    object: {\n      type: 'Identifier',\n      name,\n    },\n    property: {\n      type: 'Identifier',\n      name: node.callee.name,\n    },\n  }\n}\n\nconst handleImports = ({\n  parsed,\n  importType,\n  usageParadigm,\n  importModularity,\n}) => {\n  walk.ancestor(parsed, {\n    ImportDeclaration(node, ancestors) {\n      let source = node.source.value\n      const nodeIndex = ancestors[0].body.indexOf(node)\n\n      if (\n        !node.specifiers.length ||\n        node.specifiers[0].type === 'ImportDefaultSpecifier'\n      ) {\n        return\n      }\n\n      const importedNames = node.specifiers.map(\n        specifier => specifier.imported.name\n      )\n\n      if (usageParadigm === 'oo' && source === 'wealth/fn') {\n        let imports = []\n        if (importModularity === 'modular') {\n          if (importType === 'esm') {\n            imports = generateESM({\n              importedNames,\n            })\n          } else {\n            imports = generateCJS({\n              importedNames,\n            })\n          }\n        }\n        ancestors[0].body.splice(nodeIndex, 1, ...imports)\n        return\n      }\n\n      if (\n        usageParadigm === 'oo' &&\n        source === 'wealth' &&\n        importModularity === 'full'\n      ) {\n        node.source.value = source = 'wealth/full'\n      }\n\n      if (importType === 'esm') {\n        return\n      }\n\n      convertToCJS({\n        body: ancestors[0].body,\n        importedNames,\n        nodeIndex,\n        source,\n      })\n    },\n    CallExpression(node) {\n      if (\n        usageParadigm === 'oo' &&\n        node.callee.type === 'Identifier' &&\n        methods.includes(node.callee.name)\n      ) {\n        convertToOO(node)\n      }\n    },\n  })\n}\n\n// const splitSourceIntoCommentsAndCodeBlocks = (source) => {\n//   const regex = /^\\/\\/.+$/gm;\n//   let indices = [];\n//   let match;\n//   while (match = regex.exec(source)) {\n//     indices = [\n//       ...indices,\n//       match.index,\n//       match.index + match[0].length\n//     ];\n//   }\n//   return splitAt(source, indices);\n// };\n\nconst configurator = ({\n  source,\n  importType,\n  usageParadigm,\n  importModularity,\n}) => {\n  // console.log(splitSourceIntoCommentsAndCodeBlocks(source));\n  const parsed = acorn.parse(source, {\n    sourceType: 'module',\n  })\n\n  handleImports({\n    parsed,\n    importType,\n    usageParadigm,\n    importModularity,\n  })\n\n  const code = escodegen.generate(parsed, {\n    format: {\n      indent: {\n        style: '  ',\n        quotes: 'single',\n      },\n    },\n  })\n\n  return code.replace(/\\{(.+)\\}/gm, '{ $1 }')\n}\n\nexport default configurator\n","import React, { useContext } from 'react'\nimport { Prism as CodeBlock } from 'react-syntax-highlighter'\nimport { tomorrow } from 'react-syntax-highlighter/dist/styles/prism'\nimport { GridContainer, GridItem } from '../Grid'\nimport CodeBlockOptions from './CodeBlockOptions'\nimport configurator from './configurator'\nimport { context } from './Provider'\n\nconst ConfigurableCodeBlock = ({ children }) => {\n  const { value, onChange } = useContext(context)\n  return (\n    <GridContainer>\n      <GridItem xs={12}>\n        <CodeBlockOptions\n          onChange={({ target: { name, value } }) => onChange({ name, value })}\n          {...value}\n        />\n        <CodeBlock language=\"javascript\" style={tomorrow} showLineNumbers>\n          {configurator({\n            source: children,\n            ...value,\n          })}\n        </CodeBlock>\n      </GridItem>\n    </GridContainer>\n  )\n}\n\nexport default ConfigurableCodeBlock\n"],"sourceRoot":""}